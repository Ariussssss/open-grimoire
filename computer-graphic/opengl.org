#+STARTUP: all
#+SETUPFILE: ~/.emacs.d/org-styles/html/main.theme
#+TITLE: opengl
#+DATE: [2021-10-19 23:11]
* Refers
- https://www.zhihu.com/question/51867884/answer/127979304
- https://learnopengl.com/Getting-started/Hello-Window
* 概述
OpenGL API 是一套接口, 可以在支持 OpenGL 的机器上使用和绘制.

Khrono 组织维护, 写个说明书, 
* Env
** Mac
#+begin_src bash
  brew install glfw
#+end_src

https://glad.dav1d.de/


#+DOWNLOADED: screenshot @ 2023-09-26 13:59:47
[[file:images/20230926-135947_screenshot.png]]

Find current include path and place the headerfile(~glad/include~) there, for me is ~/usr/local/include~.
#+begin_src bash
  > gcc -x c++ -v -E /dev/null
  Apple clang version 15.0.0 (clang-1500.0.40.1)
  Target: x86_64-apple-darwin22.6.0
  Thread model: posix
  InstalledDir: /Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/bin
  ....
  clang -cc1 version 15.0.0 (clang-1500.0.40.1) default target x86_64-apple-darwin22.6.0
  ignoring nonexistent directory "/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX.sdk/usr/local/include"
  ignoring nonexistent directory "/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX.sdk/Library/Frameworks"
  #include "..." search starts here:
  #include <...> search starts here:
   /usr/local/include
   /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX.sdk/usr/include/c++/v1
   /Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/lib/clang/15.0.0/include
   /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX.sdk/usr/include
   /Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/include
   /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX.sdk/System/Library/Frameworks (framework directory)
#+end_src

#+begin_src bash
  g++ test-opengl.cpp ./glad.c -lglfw && ./a.out
#+end_src

Example
#+begin_src cpp
  #include <glad/glad.h>
  #include <GLFW/glfw3.h>

  #include <iostream>

  void framebuffer_size_callback(GLFWwindow* window, int width, int height);
  void processInput(GLFWwindow *window);

  // settings
  const unsigned int SCR_WIDTH = 800;
  const unsigned int SCR_HEIGHT = 600;

  int main()
  {
      // glfw: initialize and configure
      // ------------------------------
      glfwInit();
      glfwWindowHint(GLFW_CONTEXT_VERSION_MAJOR, 3);
      glfwWindowHint(GLFW_CONTEXT_VERSION_MINOR, 3);
      glfwWindowHint(GLFW_OPENGL_PROFILE, GLFW_OPENGL_CORE_PROFILE);

  #ifdef __APPLE__
      glfwWindowHint(GLFW_OPENGL_FORWARD_COMPAT, GL_TRUE);
  #endif

      // glfw window creation
      // --------------------
      GLFWwindow* window = glfwCreateWindow(SCR_WIDTH, SCR_HEIGHT, "LearnOpenGL", NULL, NULL);
      if (window == NULL)
      {
          std::cout << "Failed to create GLFW window" << std::endl;
          glfwTerminate();
          return -1;
      }
      glfwMakeContextCurrent(window);
      glfwSetFramebufferSizeCallback(window, framebuffer_size_callback);

      // glad: load all OpenGL function pointers
      // ---------------------------------------
      if (!gladLoadGLLoader((GLADloadproc)glfwGetProcAddress))
      {
          std::cout << "Failed to initialize GLAD" << std::endl;
          return -1;
      }    

      // render loop
      // -----------
      while (!glfwWindowShouldClose(window))
      {
          // input
          // -----
          processInput(window);

          // render
          // ------
          glClearColor(0.2f, 0.3f, 0.3f, 1.0f);
          glClear(GL_COLOR_BUFFER_BIT);

          // glfw: swap buffers and poll IO events (keys pressed/released, mouse moved etc.)
          // -------------------------------------------------------------------------------
          glfwSwapBuffers(window);
          glfwPollEvents();
      }

      // glfw: terminate, clearing all previously allocated GLFW resources.
      // ------------------------------------------------------------------
      glfwTerminate();
      return 0;
  }

  // process all input: query GLFW whether relevant keys are pressed/released this frame and react accordingly
  // ---------------------------------------------------------------------------------------------------------
  void processInput(GLFWwindow *window)
  {
      if(glfwGetKey(window, GLFW_KEY_ESCAPE) == GLFW_PRESS)
          glfwSetWindowShouldClose(window, true);
  }

  // glfw: whenever the window size changed (by OS or user resize) this callback function executes
  // ---------------------------------------------------------------------------------------------
  void framebuffer_size_callback(GLFWwindow* window, int width, int height)
  {
      // make sure the viewport matches the new window dimensions; note that width and 
      // height will be significantly larger than specified on retina displays.
      glViewport(0, 0, width, height);
  }
#+end_src
* qt
跨平台开发.

旧版 unity 需要模拟机 mono. unity 5 开始使用 IL2CPP 编译成 C++,  本质上没有区别.

细节上, unity 会生成很多代码, 性能不是最优解, qt 接近原生, 但没有 unity 的游戏引擎. 
* 立即渲染 Immediate mode
固定渲染管线, 不允许开发者控制管线运算. 
* 核心模式 Core-profile
可编程管线.

GPU 渲染流水线:
1. 定点着色器 vertex shader
2. 形状(图元)装配 shape assembly
3. 几何着色器 geometry shader
4. 光栅化 rasterization  
   形状变成像素
5. 片段着色器 fragment shader
6. 测试与混合 test and blending
   融合透明度, 阴影等

   openGL 3.2 推出, 与传统管线模式(立即渲染)的区别就是 允许自定义修改 几何着色器 和 片段着色器. 
* 状态机 State Machine
- openGL 本身是一个大型的状态机
- 需要描述如何操作所有变量的大型集合

  通过 状态设置函数 (State-changing Function) 和 状态应用函数 (State-using Function) 控制上下文 (Context). 
* 对象 Object
* 
* 着色器
** 顶点着色器
通过数据, 数学计算得出光照效果, 位移, 颜色值等.

有几个顶点就执行几次. 将定点组合成片圆 (图元组合 Primitive Assembly). 
** 片元着色器
计算片元的最终颜色(之后还是可能变化), 和深度值. 
** 区别
顶点着色包括细分和几何着色, 决定了一个图元应该位于屏幕的什么位置.

片元着色决定颜色.
其中:
- 顶点着色器(必要)
- 细分着色器(可选)
- 几何着色器(可选)
- 片元着色器(必)
** 处理数据
属性: 分为浮点, 整形, 布尔类型
