#+STARTUP: all
#+SETUPFILE: ~/.emacs.d/org-styles/html/main.theme
#+TITLE: structure
#+DATE: [2022-07-07 11:58]
* Refers
* B-tree
Read-Optimized

每次写之前需要先读一次, branch, root 变动触发 in-place 更新的话至少两次 读写 IO.
且增加一个 WAL 保证失败回滚
* Write-Optimized B-tree
** Append-only B-tree
随机 IO 变成顺序 IO
1. 更新触发新的 page 直接 append 到末尾
2. 无需 WAL, 数据不覆盖, 空间换时间, 需要回收旧数据
* WAL write ahead logging
* WA Write amplification
起初用来命名 SSD (Solid State Drives) 上的行为.

SSD 无法像 HDD (Hard Disk Drive) 一样, 直接标记数据块为删之后直接覆盖写新数据.
需要先擦除原数据. 而且有擦除次数寿命限制. 

NAND 闪存工作原理是以 4K 页 (page) 为一个单元写入的，
但擦除只能以块 block (64 个 page) 为单位.

所谓的写放大就是把需要擦除 block 内有效数据搬到另一个 block.
其中 trim 技术可以标记需要删的数据, 减少擦除和搬运的数据, 延长寿命. 
