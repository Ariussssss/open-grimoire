#+STARTUP: content
#+SETUPFILE: ~/.emacs.d/org-styles/html/main.theme
#+TITLE: kubernetes
#+DATE: [2022-01-05 11:08]
* Refers
- https://github.com/jolestar/kubernetes-complete-course
- https://kubernetes.io/zh/docs/tutorials/kubernetes-basics/
- https://www.kancloud.cn/huyipow/kubernetes/531982
- https://www.qikqiak.com/
* 简介
开源的, 服务器集群和跨计算机集群的容器调度部署执行管理.

名字源于希腊语, 舵手, 飞行员. k8s.

主要作用:
- 服务发现和负载均衡
- 存储编排, 本地或者公有云
- 自动部署, 回滚和资源回收
- CPU , RAM 资源计算和决策
- 自我修复崩溃应用
- 密钥和配置管理
* 组件 component
部署 k8s, 会拥有一个集群 cluster.

node, 即运行的机器. 每个运行的集群至少包含一个 node.

Pod 托管负载有应用的组件. 最小可部署单元. 

控制平面 control plane 管理 cluster 中的 worker nodes 和 Pods. 
** Control Plane Components 负责全局的管理和决策调度. Master
- kube-apiserver api 前端
- etcd 键值对数据库
- kube-scheduler 负责监视未分配 node 的 pod
- kube-controller-manager 控制器运行进程的 Control Plane Components 
  - Node Controller 错误响应和同志
  - Job controller 类似创建 pod 任务, 直至完成
  - Endpoints Controller 填充端点 EndPoint 对象, 如加入 service 和 pod
  - Service Account & Token Controllers auth

** cloud-controller-manager 云控制组件, 嵌入云控制逻辑
- Node Controller 检查节点是否相应和删除
- Route Controller 底层云基础路由
- Service Controller 创建更新删除负载均衡

** Node Components 节点组件, 在每个节点运行, 维护 pods 和 k8s 运行环境
*** Kubelet
An agent that runs on each node in the cluster.
It makes sure that containers are running in a Pod.
仅管理 k8s 创建的 container, 解析 PodSpecs 中描述的 containers.
*** Kube-proxy
实现网络代理, 集群内外部, Pod 之间的网络通信. 
*** Container Runtime 容器运行时
 支持多个容器运行环境: Docker, containerd, CRI-O 以及任何实现 Kubernetes CRI (容器运行环境接口)
** 插件 Addons
使用 k8s 资源实现集群功能, 资源命名空间属于 kube-system

https://kubernetes.io/zh/docs/concepts/cluster-administration/addons/
** DNS
每个集群都有, k8s 服务器启动容器自动收集 DNS 服务器到 DNS 搜索列表中. 
** Web UI Dashboard
** Container Resource Monitoring 容器资源监控
** Cluster-level Logging 集群层面日志
* Node
** create
允许注册不健康的节点, 会等待健康后再参加 cluster 活动. 
手动添加, 或 kubelet 对 Control Plane 注册添加.

kubelet 默认标志参数  ~--register-node~  为 true, 向 api 服务注册自己, 首选模式.

手动可以通过 kubectl 配合 API 管理, 创建和修改.
在更新节点时, 通常先用指令禁用节点. 

** state
- Addresses: HostName, ExternalIP, InternalIP
- Conditions:
  - Read
  - DiskPressure
  - MemoryPressure
  - PIDPressure
  - NetworkUnavailable
- Capacity 拥有资源总量
- Allocatable 可供 Pod 使用资源
- Info 系统信息

** HeartBeat
检测可用性和故障分析
- 节点的 .status
- Lease 对象, 存储在 kube-node-lease 命名空间

  一个轻量级高性能, 一个更详细. 

* label 键值对
用于标记和检索 node 和 pod.
常用:
- 版本标签: release:stable,release:canary
- 环境标签: environment:dev,environment:qa,environment:production
- 架构标签: tier:frontend,tier:backend,tier:cache
- 分区标签: partition:customerA,partition:customerB
- 质量管控标签: track:daily,track:weekly

demo
#+begin_src bash
  $ kubectl get pods -l 'environment=production,tier=frontend'
  $ kubectl get pods -l 'environment in (production),tier in (frontend)'
  $ kubectl get pods -l 'environment in (production, qa)'
  $ kubectl get pods -l 'environment,environment notin (frontend)'
#+end_src

* Replication Contoller

* Deployment

* Horizontal Pod Autoscaler
通过 RC/Deployment 实现水平扩容, 对应不同场景的资源需求
* Volume 数据卷
** pv PersistentVolume
** pvc PersistentVolumeClaim
pod 请求 node 资源, pvc 请求 pv 资源.
资源与服务解耦. 

#+begin_src yaml
  kind: PersistentVolumeClaim
  apiVersion: v1
  metadata:
    name: grafana-pvc-volume
    namespace: "monitoring"
  spec:
    accessModes:
      - ReadWriteOnce
    resources:
      requests:
        storage: 5Gi
    storageClassName: grafana-pv-volume

  ---

  kind: Pod
  apiVersion: v1
  metadata:
    name: mypod
  spec:
    containers:
      - name: myfrontend
        image: dockerfile/nginx
        volumeMounts:
        - mountPath: "/var/www/html"
          name: mypd
    volumes:
      - name: mypd
        persistentVolumeClaim:
          claimName: grafana-pvc-volume
#+end_src

** nfs
永久保存 Network File System
#+begin_src yaml
  volumes:
  - name: nfs
    nfs:
      # FIXME: use the right hostname
      server: 10.254.234.223
      path: "/data"
#+end_src
** emptyDir
跟 Node 绑定的持久化数据存储, 迁移或者删除会丢失. 
#+begin_src yaml
  apiVersion: v1
  kind: Pod
  metadata:
    name: test-pd
  spec:
    containers:
    - image: gcr.io/google_containers/test-webserver
      name: test-container
      volumeMounts:
      - mountPath: /test-pd
        name: test-volume
    volumes:
    - name: test-volume
      emptyDir: {}
#+end_src
* namespace
划分虚拟集群, 独立的命名空间和部分环境隔离
#+begin_src bash
  kubectl get ns
  kubectl get pods -n <namespace>
#+end_src
* kubernete object
kubernetes 的持久化描述实体, 记录行为描述, kubernetes 重复执行确保对象存在. 

必需值:
- 
* tools
** k3s
** helm
k8s 的包管理工具
Helm 有三个重要概念:
- chart: 包含了创建 Kubernetes 的一个应用实例的必要信息
- config: 包含了应用发布配置信息
- release: 是一个 chart 及其配置的一个运行实例
* ReplicaSet
用于维持一组 Pod 副本运行, 在出现故障减少时, 重启对应的 Pod
常规
* kubectl
查询定位
#+begin_src shell
  kubectl get ns/namespace
  kubectl get pod -n <namespace>
  kubectl describe -n <namespace> pod <container>
#+end_src

attach 到 console,  ~Ctrl-P Ctrl-Q~ 不好用(环境 tmux + linux)
#+begin_src bash
  kubectl attach <pod>
  fg
  kill %1
#+end_src

进入容器查看
#+begin_src bash
   kubectl exec --stdin --tty -n namespace <pod> -- /bin/bash
#+end_src
* scale
关掉和启动多 pod
#+begin_src bash
  kubectl scale --replicas=0 deployment/<your-deployment>
#+end_src
