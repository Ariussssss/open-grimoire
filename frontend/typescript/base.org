#+STARTUP: all
#+SETUPFILE: ~/.emacs.d/org-styles/html/main.theme
#+TITLE: TypeScript（体操运动员）
#+DATE: [2020-12-08 11:08]
* Refers
  - https://jkchao.github.io/typescript-book-chinese/typings/typeGuard.html#%E5%AD%97%E9%9D%A2%E9%87%8F%E7%B1%BB%E5%9E%8B%E4%BF%9D%E6%8A%A4
  
* Excess Property Checks
  多余的属性检查
  第一种属性检查，可以绕过检查，但初衷是因为 ts 允许这个变量在其他地方使用，只检查是否符合

  #+begin_src typescript
    interface LabeledValue {
      label: string;
    }
    function printLabel(labeledObj: LabeledValue) {
      console.log(labeledObj.label);
    }
    const myObj = { size: 10, label: "Size 10 Object" };
    printLabel(myObj); // 不报错
    printLabel({ size: 10, label: "Size 10 Object" }) // 报错
  #+end_src
* 过载 Overloads
  允许单个函数，处理多种参数和返回。
  PS：尖头函数不支持重载，其实很少用

  #+begin_src typescript
    public test(para: number, flag: boolean): number;
    public test(para: User | number, flag?: boolean): number {
      // 具体实现
      return 11;
    }
  #+end_src
* 推断 Infer
   
  官方解释

  #+begin_quote
  Within the extends clause of a conditional type,
  it is now possible to have infer declarations that introduce a type variable to be inferred.
  Such inferred type variables may be referenced in the true branch of the conditional type.
  It is possible to have multiple infer locations for the same type variable.
  #+end_quote

  同时和 ~extends~ 使用，可以声明一个推测的变量。一般用于三等式的 ~true~ 返回。
  可以对同一个类型变量有多层推断地址。（就是可怕的套娃）
  简单使用，配合范型 ~Generic~ 。
   
  有个思维定式，就是根据使用场景类型推断出属于哪种，而不是声明是哪种再判断是否正确。   
    
  #+begin_src typescript
    type Unpacked<T> =
      T extends (infer U)[] ? U :
      T extends (...args: any[]) => infer U ? U :
      T extends Promise<infer U> ? U :
      T;

    type T0 = Unpacked<string>;  // string
    type T1 = Unpacked<string[]>;  // string
    type T2 = Unpacked<() => string>;  // string
    type T3 = Unpacked<Promise<string>>;  // string
    type T4 = Unpacked<Promise<string>[]>;  // Promise<string>
    type T5 = Unpacked<Unpacked<Promise<string>[]>>;  // string
  #+end_src

  在字符串模板可以用成占位符，分词按字母划分，最后一个贪婪

  #+begin_src typescript
    type IsSnakeCase<
      T extends string
    > = T extends `${infer P1}_${infer P2}${infer P3}` ? true : false

    // hello_world
    // P1: hello
    // P2: w
    // P3: orld
  #+end_src
   
* 字符串模板 Template Type
  [[https://devblogs.microsoft.com/typescript/announcing-typescript-4-1/][TypeScript 4.1 发布声明]]
   
  4.1 后允许通过字符串模板定义结构
   
  #+begin_src typescript
    type EventName <T extends string> = `${T}Changed`;
    type T0 = EventName<'foo'>;  // 'fooChanged'
    type T1 = EventName<'foo' | 'bar' | 'baz'>;  // 'fooChanged' | 'barChanged' | 'bazChanged'
  #+end_src

  同时支持 ~uppercase, lowercase, capitalize, uncapitalize~ 多个关键字

  #+begin_src typescript
    type Casesextends string> = `${uppercase T} ${lowercase T} ${capitalize T} ${uncapitalize T}`;
    type T11 = Cases<'bar'>;  // 'BAR bar Bar bar'
  #+end_src

  跟 ~infer~ 配合

  #+begin_src typescript
    type PropType<T, Path extends string> =
	string extends Path ? unknown :
	Path extends keyof T ? T[Path] :
	Path extends `${infer K}.${infer R}` ? 
	    K extends keyof T ? PropType<T[K], R> : unknown :
	unknown;

    declare function get<T, P extends string>(obj: T, path: P): PropType<T, P>;

    const obj = { a: { b: {c: 42, d: 'hello' }}};

    const value = get(obj, "a.b.c")
  #+end_src

* const assertions
  TypeScript 3.4 版本功能，官方解释

  #+begin_quote
  TypeScript 3.4 引入了一个名为 const 断言的字面值的新构造。
  它的语法是一个类型断言，用 const 代替类型名称（例如 123 as const）断言构造新的文字表达式时，我们可以向语言发出以下信号：
  该表达式中的字面类型不应被扩展（例如：不能从“hello”转换为字符串）
  对象字面量获取只读属性
  数组文字成为只读元组
  #+end_quote

** 类型扩展不可拓展

* 参数
  参数没办法递归查询

  #+begin_src typescript
    export type RecordReturnType<T extends Record<any, (...args: any) => any>> = {
      [k in keyof T]: ReturnType<T[k]>;
    };

    type Options<
      State,
      S extends {
	[key: string]: (state: State & RecordReturnType<S>) => any;
      }
    > = {
      state: State;
      selector: S;
    };

    const create = <
      State,
      S extends {
	[key: string]: (state: State & RecordReturnType<S>) => any;
      }
    >(
      options: Options<State, S>,
    ) => {};

    create({
      state: {
	a: 1,
      },
      selector: {
	b: (state) => state.a + 1,
	c: (state) => state.b + 1,
      },
    });
  #+end_src

* 装饰器 Decorators
  首先需要在 tsconfig 中开启 experimentalDecorators

  一般多行使用，也可以单行空格分开

  #+begin_src typescript
    function f() {
      console.log("f(): evaluated");
      return function(target, propertyKey: string, descriptor: PropertyDescriptor) {
	console.log("f(): called", target, propertyKey, descriptor);
      };
    }

    class C {
      @f()
      method() {}
    }
    // f(): evaluated
    // f(): called C { method: [Function (anonymous)] } method {
    //   value: [Function (anonymous)],
    //   writable: true,
    //   enumerable: true,
    //   configurable: true
    // }
  #+end_src

  函数装饰器返回的是对这个 key 的描述信息，即第三个参数，可以直接修改或者 return

  属性装饰器可以拿到 target 和 key，不允许修改描述信息

* private 和 #

  ~private~ 是 ts 的编译前语法，仅在编译前作限制，编译后不起作用。

  ~#~ 是 ts 语法，同时也是 ES 提案，是编译后仍起作用的私有写法。
  基于 ~WeekMap~ 实现，需要确保运行环境支持，目前没有 Polyfill。

  #+begin_src typescript
    // ts 源码
    class Person {
	#name: string
	constructor() {
	    this.#name = 'zhangsan'
	}
    }

    /* 编译结果如下
    "use strict";
    var __classPrivateFieldSet = (this && this.__classPrivateFieldSet) || function (receiver, privateMap, value) {
	if (!privateMap.has(receiver)) {
	    throw new TypeError("attempted to set private field on non-instance");
	}
	privateMap.set(receiver, value);
	return value;
    };
    var _name;
    class Person {
	constructor() {
	    _name.set(this, void 0);
	    __classPrivateFieldSet(this, _name, 'zhangsan');
	}
    }
    _name = new WeakMap();
    ,*/
  #+end_src

* 数组自动参数
  ts 内部可以运算
  通过对象取值的方式, 生成新的参数
   
  #+begin_src typescript
    interface Props<ResType> {
      columns: { 
	[K in keyof ResType]: {
	  dataIndex: K;
	  render: (col: ResType[K], item: ResType, index: number) => void;
	} 
      }[keyof ResType][];
    }

    interface T {
      name: 'string',
      age: number,
      addr: 'string'
    }

    let a: Props<T> = {
      columns: [
	{
	  dataIndex: 'name',
	  render: (col, item, index) => {
	    console.log(col, item, index);
	  }
	}
      ]
    }
  #+end_src

* type guard 类型守护
  #+begin_src js
    function isFoo(arg: any): arg is Foo {
	return arg.foo !== undefined;
    }
  #+end_src

* 伪严禁模式
  #+begin_src typescript
    import { Equal, Expect } from '@type-challenges/utils'

    type A = { a: string; b: string };
    const source: A =  {} as any;
    const { a, ...others } = source; // 这里报错
    type T = Expect<Equal<{}, typeof others>>;

    const { a: a2, b, ...others2 } = source;
    type T2 = Expect<Equal<{}, typeof others2>>;
  #+end_src
