#+STARTUP: content
* 数据层与结构

* Refers
  - https://www.zhihu.com/question/39093254/answer/1351958747
  - https://www.tangshuang.net/7777.html

* IMGUI Immediate Mode GUI

  #+begin_quote
  React 使应用能声明自己「要渲染什么」而非「如何渲染」，就好像它们跑在立即模式下一样。
  #+end_quote

  立即模式，原理上相当于直接操作 Canvas 和 WebGL 这种东西。

  最早的 GUI 就是 CPU 里面操作一堆像素，做界面就是画像素。
  同理 Linux 的 X11，它在 C header 里定义的那堆函数也是长这个样子的。
  做不到事件回调和处理。

  立即模式 GUI 特点：
  - 没有 DOM 对象或 Widget 对象的概念，UI 都是命令式地绘制出来的。
  - 没有回调式的异步逻辑，就在一个 render 函数里 if else 单帧直出，每秒都要全量更新 60 次。
  - 常常需要涉及手动管理 Texture、Bitmap、Framebuffer 等涉及渲染管线的资源对象。

  React 同理于大部分渲染 DOM 的前端框架，只会在时间发生时执行 render。
  立即模式就是每帧刷刷。

  立即模式好处：
   - 容易嵌入游戏等实时图形应用里
   - 容易在回调函数使用不便的语言里使用
   - 接近底层，对渲染管线的控制力强

   立即模式缺点:
   - 每帧必须全量重绘，难做增量更新
   - 难做复杂的 UI 嵌套布局
   - 靠 if else 难以做复杂的 UI 状态管理

   因此当今 GUI 应用层技术都是保留模式 Retained Mode。
   UI 不再是每帧从头构建，而是被建模到了带生命周期的对象里面。
   Web 里的 DOM 和 iOS 的 UIView 和 Flutter 的 Widget 都是。

   好处是：
   - 容易基于对象状态改动，进行按需绘制
   - 可以将计算结果存在对象状态里，方便做异步处理
   - 利于封装点击测试，上层提供事件回调
   - 易于基于嵌套的对象结构，实现复杂的 UI 布局

   都是基于保留模式，通用上层，React 可以进行跨端。
   而 React 都是基于 GUI 结构套了一层 JSX 的壳，让用户可以更清晰的构造 UI 层次结构（UI Hierarchy）
   同步的倒出 render 里面的东西很像是命令式的立即模式。
   
   更底层的有类似 Konva 等操作 Canvas 和 WebGL，处理掉和立即模式相关的 GUI 逻辑。

   只有在立即模式才可以接触考虑处理 GUI 技术栈的问题。

* 前端框架

  前端三大框架包括 Flutter ，React native 等都算是结构性布局。
  对 3D 环境或者动画的渲染领域没有发挥余地。
  
  对于 MVVM 来说，前端框架基本都不包含 model 层。
  基本都是围绕 view 实现布局的控制，加上 ViewModel 层的逻辑控制和数据绑定。

  数据层 -> 逻辑层 -> 视图层
  视图交互 -> 逻辑层 -> 数据层
  视图交互 -> 逻辑层 -> 状态管理器 -> 视图层
  
  
  总结，框架只是在试图层确定了技术的编程范式，没办法解决真是业务的逻辑梳理。
  
* 数据仓库

  分为 5 层：
  1. Source 数据源层，舒服层
  2. ODS Operational Data Store 操作数据存储层
     可以同步到数据层的数据， js 不应该对其修改，除非来自服务端的数据替换。
     可以说是数据层的缓存。
  3. DW Data Warehouse 数据仓库层
     负责对数据进行变化，转化，修饰，作用是组织管理 ODS
     具体还可以细分：
     1. DWD Detail 明细层 ODS 的详细描述
     2. DWB Basis 基础层 数据统计清洗
     3. DWS Service 汇总层 为 DM 准备数据
     4. DIM 数据字典 提供字典配置，数据库使用配置
  4. DM Data Market 数据集市层
     对数据进行包装，分发给应用层


