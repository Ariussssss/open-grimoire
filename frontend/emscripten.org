#+STARTUP: all
#+SETUPFILE: ~/.emacs.d/org-styles/html/main.theme
#+TITLE: emscripten
#+DATE: [2022-03-02 10:10]
* Refers
- https://github.com/emscripten-core/emsdk.git
- docs https://emscripten.org/docs/getting_started/downloads.html
- https://www.cntofu.com/book/150/zh/ch1-quick-guide
* 安装
#+begin_src bash
  git clone https://github.com/juj/emsdk.git
  ./emsdk update
  ./emsdk install latest
  ./emsdk activate latest
#+end_src

 ~~/.zshrc~
 #+begin_src bash
   alias ue='source ~/packages/emscripten-core/emsdk/emsdk_env.sh'
 #+end_src
* 构建
#+begin_src bash
  # Browser
  emcc lib.cc -s EXPORT_ES6=1 -s INITIAL_MEMORY=1GB -s ALLOW_MEMORY_GROWTH=1 -s EXPORTED_FUNCTIONS='["_malloc", "_free"]' -s EXPORTED_RUNTIME_METHODS='["ccall","cwrap"]' -o ./build/lib.js
  # Node.js:
  emcc lib.cc -s MODULARIZE=1 -s INITIAL_MEMORY=1GB -s ALLOW_MEMORY_GROWTH=1 -s EXPORTED_FUNCTIONS='["_malloc", "_free"]' -s EXPORTED_RUNTIME_METHODS='["ccall","cwrap"]' -o ./build/lib.js
#+end_src
* 流程

#+DOWNLOADED: screenshot @ 2022-03-02 10:54:16
[[file:images/20220302-105416_screenshot.png]]

C/C++ 通过 Clang 创建 LLVM 字节码, 再编译成各自的目标
* 浏览器载入执行
1. ~WebAssembly.instantiateStreaming()~ 创建实例
2. 如果流式创建失败, 则改用  ~WebAssembly.instantiate()~ 方法创建实例
3. 实例化完成, 返回值给 ~receiveInstantiatedSource~ 处理
   1. 到处内容都在 ~Module['asm']~ 中
      
* CPP
c 函数导出时都会在函数名前添加下划线,. 
** export
#+begin_src bash
  emcc lib.cc -s MODULARIZE=1 -s INITIAL_MEMORY=1GB -s ALLOW_MEMORY_GROWTH=1 -s EXPORTED_FUNCTIONS='["_parse", "_malloc", "_free"]' -s EXPORTED_RUNTIME_METHODS='["ccall","cwrap"]' -o ./build/lib.js
#+end_src
** ccall/cwrap
** "_malloc", "_free"
1. 使用 ~Module._malloc()~ 在 Module 堆中分配内存，获取地址 ptr
2. 将字符串/数组等数据拷入内存的 ptr 处
3. 将 ptr 作为参数，调用 C/C++函数进行处理
4. 使用 ~Module._free()~ 释放 ptr
