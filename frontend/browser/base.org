
#+STARTUP: content
* browser
** Refers
   - https://segmentfault.com/a/1190000012925872
** 进程 process
   每个 tab 单独维护浏览器进程

   非绝对, 多个时有循环优化, 如空白页面进程合并等

   进程类别:
   - Browser 主进程
     - 将 渲染进程 返回的 bitmap 内存绘制到 用户界面
     - 管理页面行为和资源下载管理, 渲染进程创建和销毁
   - 第三方插件
     - 每个插件对应一个进程 
   - GPU 用于3D绘制
   - 浏览器渲染进程
     - 内置多线程, 每个 tab 一个, 负责页面渲染, 脚本执行和事件处理(理解中的浏览器进程)

   其中 渲染进程 最终会将结果交给 Browser 进程, 绘制结果
   
** 线程 thread

***  渲染进程中
    常驻线程:
    - GUI 渲染线程
      - 负责解析 HTML, CSS, 构建 DOM 树, RenderObject 树,
      - 当重绘 Repaint 或者回流(重排) Reflow 触发时, 执行
      - 有更新队列, 可被 JS 引擎打断
    - JS 引擎线程
      - 与 GUI 互斥
    - 事件触发线程
      - 管理 时间循环 机制
      - 将事件 callback 和任务队列中触发事件交给 JS 引擎
    - 定时器触发线程
      - setInterval 和 setTimeout
      - 最低为 4ms
    - 异步 http 请求线程
      - 异步请求处理 callback 交给 JS 引擎

	
** 渲染 render

*** 基本步骤
    - 解析 css 和 HTML 过程并行
      - css 单独下载线程异步下载, 不阻塞 DOM 构建和解析, 但是阻塞渲染
    - 解析完成构建 DOM 树, 和 CSS 树
    - 合并成渲染树, 计算布局
    - 绘制 bitmap
   
    HTML 默认流式布局, 变化:
    - repaint 重绘
      - 不影响布局, 修改颜色等
    - reflow 重排, 回流
      - 几何尺寸变化, 重新计算渲染树
      - 损耗最大
   
*** 图层
    图层氛围 普通 和 复合 (composite) 图层

    普通文档流可以理解成一个默认的复合图层

    需要硬件加速可以通过创建新的复合图层, 脱离文档流, 重排重绘不影响默认普通文档流

    对于 GPU 来说, 每个复合图层单独绘制

    常用的创建方式:
    - absolute, fixed
      - 不会创建新的复合层, 脱离文档流仍属于默认复合层
      - 因为脱离不会造成重排, 但是重绘时还是整个复合层刷新绘制
    - 硬件加速, 创建复合层
      - transform 3D
      - opacity 动画
      - will-change
