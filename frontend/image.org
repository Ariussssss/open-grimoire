#+STARTUP: all
#+SETUPFILE: ~/.emacs.d/org-styles/html/main.theme
#+TITLE: 图片与动画
#+DATE: [2021-07-05 09:49]
* Refers
  - https://juejin.cn/post/6844903625731358727
  - 性能比较 http://littlesvr.ca/apng/gif_apng_webp5.html
  - 
* 类型
  - 无压缩: BMP
    - 无任何压缩, 准确呈现图片
  - 无损压缩: PNG
    - 压缩算法进行编码压缩, 保证质量, 降低尺寸
  - 有损压缩: JPG
    - 肉眼不可见细节, 大幅度降低尺寸
* gif
  - LZW 压缩
    - 基于索引色的图片格式
    - 尺寸小
    - 支持透明和动画
    - 缺点是只存储 8 位索引, 256 种颜色
  - 适合 logo, icon, 线框图
* jpg
  - 有损
  - 直接色
    - 1600 颜色(2^24)
    - 肉眼可识别的颜色只有 1w, 可以移除细节压缩尺寸
* png
** png-8
   - 8位索引色
   - gif 同等质量尺寸更小
** png-24
   - 无损压缩
   - 基于直接色位图, 高品质
* webp
  - google 的新图片格式
  - 同等视觉体验缩小 30%
  - 支持动画, 透明, 有无损压缩
  - 暂无得到全面支持, 兼容性一般
* svg
  对比 canvas
  - 03 年成为 w3c 标准
  - 允许矢量, 滤镜动画
  - 支持 css
  - 用户可交互抽象到tu
* Base 64
** 概述
   简单的编码技术, 用于传输保存二进制数据.

   原理是 ASCII 编码为 8 bit , 转换为 6 bit 表示一个单元, 然后末尾用 0 补齐.

   因为 64 位可用字符比较少, 可以用有限的编码表示, 但大小会增加. 
** 其他
   邮件中 RFC 822 规定, 每 76 个字符带一个回车.

   变种, 因为数据问题 ~/~ ~+~ 会被 URLEncode 为 ~%XX~ 形式, 或其他 encode 方式
* 动画 animation
  方案对比:
  1. css animation
     - 需要依赖帧数图片的下载成功, 容易卡顿
  2. 精灵图 + background-position
     - 合成需要精确, 维护性不好, 改动麻烦
  3. gif
     - 色彩有限, 边缘杂边, 透明度有限, 压缩后不流畅
  4. video
     - 移动端兼容性不好, 需要处理自动播放
  5. lottie
     - 包大复杂动画json大, 部分动画细节缺失
  6. apng
     - 透明, 更多色彩, 体积比 gif 小
     - 兼容性不太好
  7. requestAnimationFrame+canvas
  8. SMIL

** requestAnimationFrame+canvas 方案实现
   steps:
   - 请求 apng , 解析所有帧
  
** svg 动画, SMIL
   SMIL Synchronized Multimedia Integration Language 同步多媒体集成语言

   主要能力:
   - 动画元素数值属性
   - 动画属性变换, 平移旋转
   - 颜色属性
   - 沿轨迹运动, CSS 做不到
*** package
    动画库:
    - 绘制线图的库 https://github.com/camoconnell/lazy-line-painter
*** css
    相关 css 属性,  可以用来做简单的动画:
    - stroke-dasharray: 分段, 值越大, 两个 dash 之间的空间越大
    - stroke-dashoffset: 延迟, 偏移量

    #+begin_src js
      const path = document.querySelector('.path');
      // 获取总长度
      const totalLength = path.getTotalLength();
    #+end_src
*** svg animation 元素
**** svg 元素
     - <svg> 包裹并定义整个矢量图. <svg> 标签之于矢量图就如同 <html> 标签之于一个 web 页面. 
     - <line> 创建一条直线. 
     - <polyline> 创建折线. 
     - <rect> 创建矩形. 
     - <ellipse> 创建圆和椭圆. 
     - <polygon> 创建多边形. 
     - <path> 通过指定点以及点和点之间的线来创建任意形状. 
     - <defs> 定义一个可复用的图形. 初始情况下 <defs> 里面的内容是不可见的. <defs> 标签之于矢量图就如同 <head> 标签之于一个 web 页面. 
     - <g> 将多种形状组合起来. 将组合后的形状置于 <defs> 中可以让它能够被复用. 
     - <symbol> 类似于一个组合，但是拥有一些额外的特性. 通常被置于 <defs> 标签中便于复用. 
     - <use> 获取在 <defs> 中定义的复用对象并在 SVG 中显示出来. 

**** 动画元素种类
***** <set>
      没有动画, 延迟执行. 

      #+begin_src html
	<svg width="320" height="320" xmlns="http://www.w3.org/2000/svg">
	  <g> 
	    <text font-family="microsoft yahei" font-size="120" y="160" x="160">
	      X
	      <set attributeName="x" attributeType="XML" to="60" begin="3s" />
	    </text>
	  </g>
	</svg>
      #+end_src
***** <animate>
      单属性的动画, 指定一个属性名, 对其进行变化, 可以多个组合.
      #+begin_src html
	<svg width="320" height="320" xmlns="http://www.w3.org/2000/svg">
	  <g>
	    <text font-family="microsoft yahei" font-size="120" y="160" x="160">
	      X
	      <animate
		attributeName="x"
		from="160"
		to="60"
		begin="0s"
		dur="3s"
		repeatCount="indefinite"
	      />
	      <animate
		attributeName="fill"
		from="red"
		to="blue"
		begin="0s"
		dur="3s"
		repeatCount="indefinite"
	      />
	    </text>
	  </g>
	</svg>
      #+end_src
***** <animateColor> Deprecated
***** <animateTransform>
      transition 相关动画只能用这个, 不能用直接用 ~<animate>~

      #+begin_src html
	<svg width="320" height="320" xmlns="http://www.w3.org/2000/svg">
	  <g> 
	    <text font-family="microsoft yahei" font-size="80" y="100" x="100">X</text>
	    <animateTransform attributeName="transform" begin="0s" dur="3s"  type="scale" from="1" to="1.5" repeatCount="indefinite"/>
	  </g>
	</svg>
      #+end_src
***** <animateMotion>
      沿路径动画
      #+begin_src html
	<svg width="360" height="200" xmlns="http://www.w3.org/2000/svg">
	  <text font-family="microsoft yahei" font-size="40" x="0" y="0" fill="#cd0000">X
	    <animateMotion path="M10,80 q100,120 120,20 q140,-50 160,0" begin="0s" dur="3s" repeatCount="indefinite"/>
	  </text>
	  <path d="M10,80 q100,120 120,20 q140,-50 160,0" stroke="#cd0000" stroke-width="2" fill="none" />
	</svg>
      #+end_src
**** 属性
***** attributeName
      css 属性, 或者 transform
***** attributeType
      ~CSS/XML/auto~, XML 为
***** from, to, by, values
      from, to 起始和终点值, by 可以定义累加偏移值终点值.

      values 可以直接定义所有值不需要其他属性. 
***** begin, end
      起始和结束时间, 可以用分号决定移动次数, 如 "3s;5s", 未完成动画会强制打断.

      默认秒, 其他的 "h"|"min"|"s"|"ms"

      还有自定义类别:
      - offset-value: "+1s"
      - syncbase-value: "id.end"
      - event-value:  "id.click"
      - repeat-value: "id.repeat(n)"
      - accessKey-value: "accessKey(s)" 按键 s
      - media-marker-value
      - wallclock-sync-value: "1997-07-16T19:20:30.45+01:00"
      - "indefinite" 永远
***** dur
***** calcMOde, KeyTimes, keySplines
      calcMode: discrete | linear | paced | spline

      keyTimes: "0; .8; 1" 进度节点
      keySplines: ".5 0 .5 1; 0 0 1 1" 贝塞尔控制点
***** repeatCount, repeatDur
      重复次数和重复时长
***** fill
      填补间隙: freeze | remove
***** accumulate, additive
***** restart
*** demo
**** bilibili 充电 ui
     b 站是通过透明 gif, 控制宽度变化实现的.

     hover 时上层, 透明不变, 下层 gif 宽度执行动画从 0 到 最宽.

     hover 用户的时候, 细粒状电流, 直接通过 web 执行.

     这样实现 bug 少, 体验流畅, 设计还原度高, 性能好

     css 动画, 非 svg 动画实现. 效果一般, 还原度低.  
     https://juejin.cn/post/6844904121867173902
     #+begin_src html
       <!DOCTYPE html>
       <html lang="en">
	   <head>
	       <meta charset="UTF-8" />
	       <meta name="viewport" content="width=device-width, initial-scale=1.0" />
	       <title>Document</title>
	       <style>
		body {
		    margin: 0;
		    padding: 0;
		    background-color: #eee;
		}
		/* 设置白色容器 */
		#con {
		    width: 350px;
		    height: 85px;
		    background-color: #fff;
		    position: relative;
		    border-radius: 4px;
		    margin: 50px auto;
		}
		/* 设置文本内容容器 */
		#TA-con {
		    width: 157px;
		    height: 50px;
		    background-color: #f25d8e;
		    box-shadow: 0 4px 4px rgba(255, 112, 159, 0.3);
		    position: absolute;
		    top: 50%;
		    left: 5%;
		    transform: translateY(-50%);
		    border-radius: 4px;
		    cursor: pointer;
		}
		/* 设置文本居中容器 */
		#text-con {
		    width: 100px;
		    height: 100%;
		    margin: 0 auto;
		    position: relative;
		}
		/* 做一个小闪电 */
		#linght {
		    width: 0;
		    height: 0;
		    position: absolute;
		    top: 36%;
		    left: 4px;
		    border-color: transparent;
		    border-style: solid;
		    border-width: 10px;
		    border-top: 10px solid #fff;
		    border-radius: 4px;
		    transform: rotate(-55deg);
		}
		#linght::after {
		    position: absolute;
		    top: -13px;
		    left: -11px;
		    content: "";
		    width: 0;
		    height: 0;
		    border-color: transparent;
		    border-style: solid;
		    border-width: 10px;
		    border-top: 10px solid #fff;
		    transform: rotate(180deg);
		    border-radius: 4px;
		}
		/* 文字 */
		#TA {
		    float: right;
		    line-height: 50px;
		    font-size: 15px;
		    color: #fff;
		}
		#TA-con:hover {
		    background-color: #ff6b9a;
		}

		/* 创建图形容器 */
		#tube-con {
		    width: 157px;
		    height: 55px;
		    position: absolute;
		    right: -5px;
		    top: 15px;
		}
		/* 对svg图形设置宽高 */
		svg {
		    width: 100%;
		    height: 100%;
		}
		/* 创建一个蒙版 宽度为0，当我hover充电框的时候，宽度展开 */
		#mask {
		    width: 0px;
		    height: 100%;
		    overflow: hidden;
		    position: absolute;
		    top: 0;
		    left: 0;
		    transition: all 0.5s;
		}
		/* 对蒙版的sbg单独设置宽高，保证宽度高低有一个固定值而不是百分比 */
		#mask svg {
		    width: 157px;
		    height: 55px;
		}
		/* 对充电框hover的时候开始动画，将粉色线条铺开 */
		#TA-con:hover + #tube-con > #mask {
		    width: 157px;
		}
		/* 对充电框hover的时候开始动画，添加黄色快速移动的动画 */
		#TA-con:hover + #tube-con > #orange-mask {
		    animation: move1 0.5s linear 0.2s infinite;
		}
		#TA-con:hover + #tube-con > #orange-mask svg {
		    animation: movetwo 0.5s linear 0.2s infinite;
		}
		/* 创建黄色移动的蒙版 */
		#orange-mask {
		    width: 18px;
		    height: 100%;
		    overflow: hidden;
		    position: absolute;
		    left: -15px;
		    top: 0px;
		}
		/* 创建黄色移动的内容 */
		#orange-mask svg {
		    position: absolute;
		    top: 0;
		    left: 15px;
		    width: 157px;
		    height: 55px;
		}
		@keyframes move1 {
		    0% {
			left: -15px;
		    }
		    100% {
			left: 140px;
		    }
		}
		@keyframes movetwo {
		    0% {
			left: 15px;
		    }
		    100% {
			left: -140px;
		    }
		}
		#people {
		    position: absolute;
		    right: 10px;
		    top: 8px;
		    font-size: 12px;
		    font-family: "雅黑";
		    color: #aaa;
		}
		#people > b {
		    color: #777;
		}
	       </style>
	   </head>

	   <body>
	       <div id="con">
		   <div id="TA-con">
		       <div id="text-con">
			   <div id="linght"></div>
			   <div id="TA">为TA充电</div>
		       </div>
		   </div>
		   <div id="tube-con">
		       <svg
			   viewBox="0 0 1028 385"
			   fill="none"
			   xmlns="http://www.w3.org/2000/svg"
		       >
			   <path
			       d="M1 77H234.226L307.006 24H790"
			       stroke="#e5e9ef"
			       stroke-width="20"
			   />
			   <path
			       d="M0 140H233.035L329.72 71H1028"
			       stroke="#e5e9ef"
			       stroke-width="20"
			   />
			   <path
			       d="M1 255H234.226L307.006 307H790"
			       stroke="#e5e9ef"
			       stroke-width="20"
			   />
			   <path
			       d="M0 305H233.035L329.72 375H1028"
			       stroke="#e5e9ef"
			       stroke-width="20"
			   />
			   <rect y="186" width="236" height="24" fill="#e5e9ef" />
			   <ellipse cx="790" cy="25.5" rx="25" ry="25.5" fill="#e5e9ef" />
			   <circle r="14" transform="matrix(1 0 0 -1 790 25)" fill="white" />
			   <ellipse cx="790" cy="307.5" rx="25" ry="25.5" fill="#e5e9ef" />
			   <circle r="14" transform="matrix(1 0 0 -1 790 308)" fill="white" />
		       </svg>
		       <div id="mask">
			   <svg
			       viewBox="0 0 1028 385"
			       fill="none"
			       xmlns="http://www.w3.org/2000/svg"
			   >
			       <path
				   d="M1 77H234.226L307.006 24H790"
				   stroke="#f25d8e"
				   stroke-width="20"
			       />
			       <path
				   d="M0 140H233.035L329.72 71H1028"
				   stroke="#f25d8e"
				   stroke-width="20"
			       />
			       <path
				   d="M1 255H234.226L307.006 307H790"
				   stroke="#f25d8e"
				   stroke-width="20"
			       />
			       <path
				   d="M0 305H233.035L329.72 375H1028"
				   stroke="#f25d8e"
				   stroke-width="20"
			       />
			       <rect y="186" width="236" height="24" fill="#f25d8e" />
			       <ellipse cx="790" cy="25.5" rx="25" ry="25.5" fill="#f25d8e" />
			       <circle r="14" transform="matrix(1 0 0 -1 790 25)" fill="white" />
			       <ellipse cx="790" cy="307.5" rx="25" ry="25.5" fill="#f25d8e" />
			       <circle r="14" transform="matrix(1 0 0 -1 790 308)" fill="white" />
			   </svg>
		       </div>
		       <div id="orange-mask">
			   <svg
			       viewBox="0 0 1028 385"
			       fill="none"
			       xmlns="http://www.w3.org/2000/svg"
			   >
			       <path
				   d="M1 77H234.226L307.006 24H790"
				   stroke="#ffd52b"
				   stroke-width="20"
			       />
			       <path
				   d="M0 140H233.035L329.72 71H1028"
				   stroke="#ffd52b"
				   stroke-width="20"
			       />
			       <path
				   d="M1 255H234.226L307.006 307H790"
				   stroke="#ffd52b"
				   stroke-width="20"
			       />
			       <path
				   d="M0 305H233.035L329.72 375H1028"
				   stroke="#ffd52b"
				   stroke-width="20"
			       />
			       <rect y="186" width="236" height="24" fill="#ffd52b" />
			       <ellipse cx="790" cy="25.5" rx="25" ry="25.5" fill="#ffd52b" />
			       <circle r="14" transform="matrix(1 0 0 -1 790 25)" fill="white" />
			       <ellipse cx="790" cy="307.5" rx="25" ry="25.5" fill="#ffd52b" />
			       <circle r="14" transform="matrix(1 0 0 -1 790 308)" fill="white" />
			   </svg>
		       </div>
		       <p id="people">共 <b>0</b> 人</p>
		   </div>
	       </div>
	   </body>
       </html>
     #+end_src

**** 进度条 circle
     #+begin_src html
       <!DOCTYPE html>
       <html lang="en">
	 <head>
	   <meta charset="UTF-8" />
	   <meta name="viewport" content="width=device-width, initial-scale=1.0" />
	   <meta http-equiv="X-UA-Compatible" content="ie=edge" />
	   <title>Static Template</title>
	 </head>
	 <style>
	   circle {
	   -webkit-transition: stroke-dasharray 0.25s;
	   transition: stroke-dasharray 0.25s;
	   }
	 </style>
	 <body>
	   <svg width="440" height="440" viewbox="0 0 440 440">
	     <circle
	       cx="220"
	       cy="220"
	       r="170"
	       stroke-width="50"
	       stroke="#D1D3D7"
	       fill="none"
	       ></circle>
	     <circle
	       cx="220"
	       cy="220"
	       r="170"
	       stroke-width="50"
	       stroke="#00A5E0"
	       fill="none"
	       transform="matrix(0,-1,1,0,0,440)"
	       stroke-dasharray="0 1069"
	       ></circle>
	   </svg>
	   <p>
	     拖我：<input
		     id="range"
		     type="range"
		     min="0"
		     max="100"
		     value="0"
		     style="width: 300px;"
		     />
	   </p>
	 </body>
	 <script>
	   if (window.addEventListener) {
	   var range = document.querySelector("#range"),
	   circle = document.querySelectorAll("circle")[1];
	   if (range && circle) {
	   range.addEventListener("change", function () {
	   var percent = this.value / 100,
	   perimeter = Math.PI * 2 * 170;
	   circle.setAttribute(
	   "stroke-dasharray",
	   perimeter * percent + " " + perimeter * (1 - percent)
	   );
	   });
	   }
	   }
	 </script>
       </html>
     #+end_src
