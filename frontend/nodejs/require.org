#+STARTUP: content
* node-require
** Refers
** global
   
   #+begin_src js
     console.log('this', this)
     ;(function () {
       console.log('closure this', this)
     })()
   #+end_src

   这里使用 node 执行，会有两个结果，第一个是 ~{}~, 第二个是 ~global~ 对象。

   第一个是 ~loader.js~ 中绑定的 ~module.exports~ ， 其实很好理解跟 js 的函数 class 差不多逻辑。
   就是返回 ~new~ 的对象，并绑定 ~this~ 。

   #+begin_src js
     // node/lib/internal/modules/cjs/loader.js:1099
     const exports = this.exports;
     const thisValue = exports;
     const module = this;
     if (requireDepth === 0) statCache = new SafeMap();
     if (inspectorWrapper) {
       result = inspectorWrapper(compiledWrapper, thisValue, exports,
				 require, module, filename, dirname);
     } else {
       result = ReflectApply(compiledWrapper, thisValue,
			     [exports, require, module, filename, dirname]);
     }
   #+end_src

   第二个 ~this~ 是全局的 ~global~ 对象。
   因为闭包没有绑定执行作用域，使用的是上一层的作用域和 ~loader~ 一致都是 ~global~ 。
   
*** globalThis 与 global
