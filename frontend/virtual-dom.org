#+STARTUP: content
#+CREATED: [2021-06-06 12:27]
* virtual-dom
** Refers
   - https://zhuanlan.zhihu.com/p/149972619
** easy vd
   最简单的视线
   #+begin_src js
     // 创建dom元素
     function createElement(vdom) {
	 // 如果vdom是字符串或者数字类型，则创建文本节点，比如“Hello World”
	 if (typeof vdom === 'string' || typeof vdom === 'number') {
	     return doc.createTextNode(vdom);
	 }

	 const {tag, props, children} = vdom;

	 // 1. 创建元素
	 const element = doc.createElement(tag);

	 // 2. 属性赋值
	 setProps(element, props);

	 // 3. 创建子元素
	 // appendChild在执行的时候，会检查当前的this是不是dom对象，因此要bind一下
	 children.map(createElement)
		 .forEach(element.appendChild.bind(element));

	 return element;
     }

     // 属性赋值
     function setProps(element, props) {
	 for (let key in props) {
	     element.setAttribute(key, props[key]);
	 }
     }
   #+end_src
** diff
   #+begin_src js
     function tick(element) {
	 if (state.num > 20) {
	     clearTimeout(timer);
	     return;
	 }

	 const newVDom = view();

	 // 生成差异对象
	 const patchObj = diff(preVDom, newVDom);
     }

     function diff(oldVDom, newVDom) {
	 // 新建 node
	 if (oldVDom == undefined) {
	     return {
		 type: nodePatchTypes.CREATE,
		 vdom: newVDom
	     }
	 }s

	 // 删除 node
	 if (newVDom == undefined) {
	     return {
		 type: nodePatchTypes.REMOVE
	     }
	 }

	 // 替换 node
	 if (
	     typeof oldVDom !== typeof newVDom ||
	     ((typeof oldVDom === 'string' || typeof oldVDom === 'number') && oldVDom !== newVDom) ||
	     oldVDom.tag !== newVDom.tag
	 ) {
	    return {
		type: nodePatchTypes.REPLACE,
		vdom: newVDom
	    } 
	 }

	 // 更新 node
	 if (oldVDom.tag) {
	     // 比较 props 的变化
	     const propsDiff = diffProps(oldVDom, newVDom);

	     // 比较 children 的变化
	     const childrenDiff = diffChildren(oldVDom, newVDom);

	     // 如果 props 或者 children 有变化，才需要更新
	     if (propsDiff.length > 0 || childrenDiff.some( patchObj => (patchObj !== undefined) )) {
		 return {
		     type: nodePatchTypes.UPDATE,
		     props: propsDiff,
		     children: childrenDiff
		 }   
	     }

	 }
     }

     // 比较 props 的变化
     function diffProps(oldVDom, newVDom) {
	 const patches = [];

	 const allProps = {...oldVDom.props, ...newVDom.props};

	 // 获取新旧所有属性名后，再逐一判断新旧属性值
	 Object.keys(allProps).forEach((key) => {
		 const oldValue = oldVDom.props[key];
		 const newValue = newVDom.props[key];

		 // 删除属性
		 if (newValue == undefined) {
		     patches.push({
			 type: propPatchTypes.REMOVE,
			 key
		     });
		 } 
		 // 更新属性
		 else if (oldValue == undefined || oldValue !== newValue) {
		     patches.push({
			 type: propPatchTypes.UPDATE,
			 key,
			 value: newValue
		     });
		 }
	     }
	 )

	 return patches;
     }

     // 比较 children 的变化
     function diffChildren(oldVDom, newVDom) {
	 const patches = [];

	 // 获取子元素最大长度
	 const childLength = Math.max(oldVDom.children.length, newVDom.children.length);

	 // 遍历并diff子元素
	 for (let i = 0; i < childLength; i++) {
	     patches.push(diff(oldVDom.children[i], newVDom.children[i]));
	 }

	 return patches;
     }
   #+end_src
** diff 优化
   - 不需要存储, 发现变化直接更新到真实 dom
   - virtual dom 直接和真实 dom 对比
     - 移动而非创建和删除
     - 解决方案, 将 vdom 分成有 key 和无 key 两种
** diff 算法
