#+STARTUP: content
#+SETUPFILE: ~/.emacs.d/org-styles/html/main.theme
#+TITLE: concurrency-mode
#+DATE: [2021-11-01 09:44]
* Refers
  - https://juejin.cn/post/6867867393683636237
* requestIdleCallback polyfill
  16 开始, 实现异步渲染模式 (Concurrency Mode), 解决 Stack Reconciler 同步更新的问题.

  将每个大的渲染任务分解成小的任务. 

  对于不支持 ~requestIdleCallback~, React 采用 ~requestAnimationFrame~ 和 ~postMessage~ 来实现.

  #+begin_src js
    // 定义message 事件名
    var messageKey =
      "__reactIdleCallback$" +
      Math.random()
	.toString(36)
	.slice(2)

    // 监听message
    window.addEventListener("message", idleTick, false)

    // 使用 rAF 来保证在下一帧触发

    rIC = function(callback) {
      // 先是存储callback
      scheduledRICCallback = callback
      // 判断是否正在rAF调度
      if (!isAnimationFrameScheduled) {
	isAnimationFrameScheduled = true
	requestAnimationFrame(animationTick)
      }
      return 0
    }

    // 先将需要执行的callback保存起来, 接着触发 rAF

    var animationTick = function(rafTime) {
      isAnimationFrameScheduled = false
      if (!isIdleScheduled) {
	isIdleScheduled = true
	window.postMessage(messageKey, "*")
      }
    }

    // 在 rAF 触发函数里，调用postMessage，触发 message 事件。

    var idleTick = function(event) {
      // 检查是否内部触发的message，
      if (event.source !== window || event.data !== messageKey) {
	return
      }
      isIdleScheduled = false
      // 获取之前存的callback
      var callback = scheduledRICCallback
      scheduledRICCallback = null
      if (callback !== null) {
	// 真正执行callback
	callback(frameDeadlineObject)
      }
    }
  #+end_src
** 不直接使用 raf
   因为他的触发在帧开头, 更新操作在 raf 中会增加帧完成所需时间, 降低帧率. 
** 为什么不用 setTimeout

   
