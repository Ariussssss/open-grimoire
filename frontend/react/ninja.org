#+STARTUP: content
#+CREATED: [2021-05-23 11:52]
* ninja
** 懒加载
   可以使用 ~react.lazy~ 对操作后的组件进行分离, 懒加载

   #+begin_src js
     import { lazy, Suspense, Component } from "react"
     import "./styles.css"

     // 对加载失败进行容错处理
     class ErrorBoundary extends Component {
       constructor(props) {
	 super(props)
	 this.state = { hasError: false }
       }

       static getDerivedStateFromError(error) {
	 return { hasError: true }
       }

       render() {
	 if (this.state.hasError) {
	   return <h1>这里处理出错场景</h1>
	 }

	 return this.props.children
       }
     }

     const Comp = lazy(() => {
       return new Promise((resolve, reject) => {
	 setTimeout(() => {
	   if (Math.random() > 0.5) {
	     reject(new Error("模拟网络出错"))
	   } else {
	     resolve(import("./Component"))
	   }
	 }, 2000)
       })
     })

     export default function App() {
       return (
	 <div className="App">
	   <div style={{ marginBottom: 20 }}>
	     实现懒加载优化时，不仅要考虑加载态，还需要对加载失败进行容错处理。
	   </div>
	   <ErrorBoundary>
	     <Suspense fallback="Loading...">
	       <Comp />
	     </Suspense>
	   </ErrorBoundary>
	 </div>
       )
     }
   #+end_src
** 懒渲染
   渲染组件会带有一定的副作用, 影响性能.
   可以通过监听滚动判断渲染. 
   #+begin_src js
     import { useState, useEffect } from "react"
     import VisibilityObserver, {
       useVisibilityObserver,
     } from "react-visibility-observer"

     const VisibilityObserverChildren = ({ callback, children }) => {
       const { isVisible } = useVisibilityObserver()
       useEffect(() => {
	 callback(isVisible)
       }, [callback, isVisible])

       return <>{children}</>
     }

     export const LazyRender = () => {
       const [isRendered, setIsRendered] = useState(false)

       if (!isRendered) {
	 return (
	   <VisibilityObserver rootMargin={"0px 0px 0px 0px"}>
	     <VisibilityObserverChildren
	       callback={isVisible => {
		 if (isVisible) {
		   setIsRendered(true)
		 }
	       }}
	     >
	       <span />
	     </VisibilityObserverChildren>
	   </VisibilityObserver>
	 )
       }

       console.log("滚动到可视区域才渲染")
       return <div>我是 LazyRender 组件</div>
     }
   #+end_src
** debounce
   一般 ~useEffect~ 会造成数据立即更新, 有时候不想要太频繁.
   #+begin_src js
     import { useState, useEffect } from "react"
     import { useDebounce } from "use-debounce"

     export default function App() {
       const [text, setText] = useState("Hello")
       const [debouncedValue] = useDebounce(text, 300)

       useEffect(() => {
	 // 根据 debouncedValue 进行搜索
       }, [debouncedValue])

       return (
	 <div>
	   <input
	     defaultValue={"Hello"}
	     onChange={e => {
	       setText(e.target.value)
	     }}
	   />
	   <p>Actual value: {text}</p>
	   <p>Debounce value: {debouncedValue}</p>
	 </div>
       )
     }
   #+end_src
