#+STARTUP: content
* Wasm
* Referrs
  - [[https://docs.wasmer.io/integrations/rust][rust wasm docs]]
  - [[https://wapm.io/][wapm: wasm package manager]]
  - [[https://wasmerio.github.io/wasmer/crates/wasmer_runtime/][wasm runtime]]
* FAQ
** nightly
   #+begin_src bash
     rustup -v install  nightly
     rustup target add wasm32-unknown-unknown --toolchain nightly
     rustup default nightly
   #+end_src
** wasm-bindgen version
   版本不对的时候, 可以尝试切换 tag.
   当版本有 commit hash 说明对不上. 
   #+begin_src bash
     error:

     it looks like the Rust project used to create this wasm file was linked against
     a different version of wasm-bindgen than this binary:

       rust wasm file: 0.2.73 (c8fb41faf)
	  this binary: 0.2.73

     Currently the bindgen format is unstable enough that these two version must
     exactly match, so it's required that these two version are kept in sync by
     either updating the wasm-bindgen dependency or this binary. You should be able
     to update the wasm-bindgen dependency with:

	 cargo update -p wasm-bindgen

     or you can update the binary with

	 cargo install -f wasm-bindgen-cli

     if this warning fails to go away though and you're not sure what to do feel free
     to open an issue at https://github.com/rustwasm/wasm-bindgen/issues!

     Error: Running the wasm-bindgen CLI
     Caused by: failed to execute `wasm-bindgen`: exited with exit code: 1
       full command: "/Users/ariuszhao/.cargo/bin/wasm-bindgen" "/Users/ariuszhao/Packages/rustwasm/wasm-bindgen/target/wasm32-unknown-unknown/debug/webgl.wasm" "--out-dir" "/Users/ariuszhao/Packages/rustwasm/wasm-bindgen/examples/webgl/pkg" "--typescript" "--target" "bundler" "--out-name" "index" "--debug"
   #+end_src
* 场景
** 视频截帧
*** video + canvas
    利用 canvas 进行截图, 对应时间戳导入画布
    #+begin_src js
      async takeSnapshot(time?: VideoTime): Promise {
	  // 首先通过createElement，创建video,
	  // 在video上设置src后，通过currentTime方法，将视频设置到指定时间戳
	  const video = await this.loadVideo(time);
	  const canvas = document.createElement('canvas');
	  // 获取video标签的尺寸，作为画布的长宽
	  canvas.width = video.videoWidth;
	  canvas.height = video.videoHeight;
	  const context = canvas.getContext('2d');

	  if (!context) {
	      throw new Error('error creating canvas context');
	  }
	  // 当前时间戳下的video作为图像源，在canvas上绘制图像
	  context.drawImage(video, 0, 0, canvas.width, canvas.height);

	  const dataURL = canvas.toDataURL();
	  return dataURL;
      }
    #+end_src

    目前 video 仅支持固定编码格式:
    - H.264 编码, mp4 格式(MPEG-LA公司)
    - VP8 编码,  webm 格式(Google公司)
    - Theora 编码, ogg 格式(iTouch公司)
*** 基于 wasm + FFmpeg
    Emscripten 将 c 编译成 wasm + js
**** Emscripten
     https://github.com/emscripten-core/emsdk.git
     docs https://emscripten.org/docs/getting_started/downloads.html
     构建
     #+begin_src bash
       # Download and install the latest SDK tools.
       ./emsdk install latest

       # Make the "latest" SDK "active" for the current user. (writes .emscripten file)
       ./emsdk activate latest

       # Activate PATH and other environment variables in the current terminal
       source ./emsdk_env.sh
     #+end_src
**** 编译 FFmpeg
     生成 makefile
     #+begin_src bash
       emconfigure ./configure \
	   --prefix=/path/to/lib/lib/ffmpeg-emcc \
	   --cc="emcc" \
	   --cxx="em++" \
	   --ar="emar" \
	   --enable-cross-compile \
	   --target-os=none \
	   --arch=x86_32 \
	   --cpu=generic \
	   --disable-ffplay \
	   --disable-ffprobe \
	   --disable-asm \
	   --disable-doc \
	   --disable-devices \
	   --disable-pthreads \
	   --disable-w32threads \
	   --disable-network \
	   --disable-hwaccels \
	   --disable-parsers \
	   --disable-bsfs \
	   --disable-debug \
	   --disable-protocols \
	   --disable-indevs \
	   --disable-outdevs \
	   --disable-swresample

     #+end_src
     构建依赖
     #+begin_src bash
       emmake make -j4
       # or
       make

       make install
     #+end_src
     简单构建 ffmpeg.wasm, ~EXPORTED_FUNCTIONS~ 指定 js 可调用函数. 
     #+begin_src bash
       export TOTAL_MEMORY=33554432

       export FFMPEG_PATH=/path/to/ffmpeg/lib/ffmpeg-emcc

       emcc capture.c ${FFMPEG_PATH}/lib/libavformat.a ${FFMPEG_PATH}/lib/libavcodec.a ${FFMPEG_PATH}/lib/libswscale.a ${FFMPEG_PATH}/lib/libavutil.a \
	   -O3 \
	   -I "${FFMPEG_PATH}/include" \
	   -s WASM=1 \
	   -s TOTAL_MEMORY=${TOTAL_MEMORY} \
	   -s EXPORTED_FUNCTIONS='["_main", "_free", "_capture"]' \
	   -s ASSERTIONS=1 \
	   -s ALLOW_MEMORY_GROWTH=1 \
	   -o /capture.js
     #+end_src
**** 调用
     emcc 构建出 ffmpeg.wasm + ffmpeg.js

     直接使用:
     #+begin_quote
     ffmpeg.js: https://github.com/Kagami/ffmpeg.js

     videoconverter.js: https://github.com/bgrins/videoconverter.js
     #+end_quote

     其中:
     - libavcodec - 音视频编解码 
     - libavformat - 音视频解封装
     - libavutil - 工具函数
     - libswscale - 图像缩放&色彩转换

     ffmpeg 操作, 提取视频帧, 通过内存传递将 RGB 传递给 js 绘制图像. 
