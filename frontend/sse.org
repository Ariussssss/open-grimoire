#+STARTUP: content
#+CREATED: [2021-06-30 11:31]
* sse
** Refers
   - http://www.ruanyifeng.com/blog/2017/05/server-sent_events.html
** 本质
   SSE Server-Sent Events

   客户端建立链接后不关闭, 一直等待服务器传输新数据, 类似视频播放

   通信基于流, 不同于 WebSocket 全双工, SSE 是单向的
** 特点
   - 使用 http, websocket 是独立协议
   - 轻量级, 简单
   - 支持断线重连
   - 一般传输文本
     必须是 UTF-8 编码文本, 字段使用"\n"来做分割
   - 自定义消息类型
** 使用场景
   - 股票行情
   - 网站自动更新 Twitter
** 实现
*** 客户端 

    消息可以自定义, 不一定总是 message
    #+begin_src js
      const source = new EventSource(url, { withCredentials: true });

      source.addEventListener('open', function (event) {
	// ...
      }, false);

      source.addEventListener('message', function (event) {
	var data = event.data;
	// handle message
      }, false);

      source.addEventListener('error', function (event) {
	// handle error event
      }, false);

      source.close()
    #+end_src

   
*** 服务端 
    #+begin_src js
      var http = require("http");

      http.createServer(function (req, res) {
	var fileName = "." + req.url;

	if (fileName === "./stream") {
	  res.writeHead(200, {
	    "Content-Type":"text/event-stream",
	    "Cache-Control":"no-cache",
	    "Connection":"keep-alive",
	    "Access-Control-Allow-Origin": '*',
	  });
	  res.write("retry: 10000\n");
	  res.write("event: connecttime\n");
	  res.write("data: " + (new Date()) + "\n\n");
	  res.write("data: " + (new Date()) + "\n\n");

	  interval = setInterval(function () {
	    res.write("data: " + (new Date()) + "\n\n");
	  }, 1000);

	  req.connection.addListener("close", function () {
	    clearInterval(interval);
	  }, false);
	}
      }).listen(8844, "127.0.0.1");
    #+end_src
    查看运行 https://jsbin.com/vuziboduwa/edit?html,output
