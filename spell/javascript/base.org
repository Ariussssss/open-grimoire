#+STARTUP: content
#+CREATED: [2021-06-21 10:15]
* base
** Refers
** babel
   debug https://astexplorer.net/
** 作用域
   直接声明 默认挂到最顶层, 即 window (node 为 模块)

   var 为声明局部, 不产生暂时死区, 带有作用域, 会被回收

** 原型
   原型链 prototype 是构造生成本身的原型, ~__proto__~ 指向父构造函数的原型  

   构造完成后分离不互相影响

   根是 null, 构造函数构造后和 Function 类分离
   
** undefined
   可以修改, 建议用 void 0, 一般表示无参数

   babel 对于可选链的兼容性转化逻辑
   #+begin_src js
     const a = {b:1, c: undefined}
     a?.c ?? a?.b ?? 0
   #+end_src
   
   #+begin_src js
     var _ref, _a$c

     var a = {
	     b: 1,
	     c: undefined,
     }
     ;(_ref =
	     (_a$c = a === null || a === void 0 ? void 0 : a.c) !== null && _a$c !== void 0
		     ? _a$c
		     : a === null || a === void 0
		     ? void 0
		     : a.b) !== null && _ref !== void 0
	     ? _ref
	     : 0

   #+end_src
   
** typeof 和 instanceof
   
*** typeof 
     typeof 判断 number, string, object, boolean, function, undefined, symbol 这七种类中的一种

     如果是对象声明, 则判断不出来, 如 ~typeof new String('abc') === 'object'~

     机械码查询
     
     js 在底层存储变量的时候，会在变量的机器码的低位 1-3 位存储其类型信息👉
     - 000：对象
     - 010：浮点数
     - 100：字符串
     - 110：布尔
     - 1：整数

     还可以用 ~Object.prototype.toString~ 的方式来判断类型, 会相对准确

     需要注意 null 机器码也为 0, 是对象, 原型链的终点

*** instanceof
    判断属于类型, 原型链查询, 所以可以为多个

    顺着原型链遍历 ~__proto__~, 最终为 null

    原型链查询, 允许被修改
