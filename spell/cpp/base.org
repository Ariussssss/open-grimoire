#+STARTUP: all
#+SETUPFILE: ~/.emacs.d/org-styles/html/main.theme
#+TITLE: base
#+DATE: [2021-10-20 19:05]
* 版本
mac
#+begin_src bash
  gcc -dumpversion
#+end_src
* syntax
** 常规结构
1. 注释
2. 预处理器编译指令 ~#include~
3. 编译指令  ~using namespace~

程序必须包含 main 函数, 返回值返回给操作系统
*** 预处理器
一般是 include 引用
*** 头文件
include file(库), header file 声明库

头文件用扩展名 h. 老版本: ~math.h~, ~cmath~
*** 命名空间
using 之后可以省略前缀, ~std::cout => cout~
** 输入输出
std 的  ~cin~ 和 ~cout~ 负责输入输出.

相比 ~printf~ 多了类型判断和自动转化

~<<~ 表示传输, 是 cout 对象的符号重载.

形似 ~cin >> variable~
#+begin_src cpp
  #include <iostream>

  int main() {
    int x, y;                          // 声明变量
    std::cin >> x >> y;                // 读入 x 和 y
    std::cout << y << std::endl << x;  // 输出 y，换行，再输出 x
    return 0;                          // 结束主函数
  }
#+end_src

~scanf~ 和 ~printf~  也可以输入和格式化
#+begin_src cpp
  #include <cstdio>

  int main() {
    int x, y;
    scanf("%d%d", &x, &y);   // 读入 x 和 y
    printf("%d\n%d", y, x);  // 输出 y，换行，再输出 x
    return 0;
  }
#+end_src
** ~#define~ 命令
预处理宏定义
#+begin_src cpp
  #include <iostream>
  #define n 233
  // n 不是变量，而是编译器会将代码中所有 n 文本替换为 233，但是作为标识符一部分的
  // n 的就不会被替换，如 fn 不会被替换成 f233，同样，字符串内的也不会被替换

  int main() {
    std::cout << n;  // 输出 233
    return 0;
  }
#+end_src
函数替换
#+begin_src cpp
  #include <iostream>
  #define sum(x, y) ((x) + (y))
  #define square(x) ((x) * (x))

  int main() {
    std::cout << sum(1, 2) << ' ' << 2 * sum(3, 5) << std::endl;  // 输出 3 16
  }
#+end_src

全程序文本替换, 有错误风险

主要用途:
1. 避免忘记 ~longlong~ 导致错误
   #+begin_src cpp
     #define int long long+signed main()
   #+end_src
2. 减少重复代码, 压缩代码量
   #+begin_src cpp
     #define For(i, l, r) for (int i = (l); i <= (r); ++i)
     #define pb push_back
     #define mid ((l + r) / 2)
   #+end_src
** 基本类型
bool, char, int, float, double, void.

1 字节 (byte) = 8 位 (bit)
*** bool
~true~ 和 ~false~ 两种, 占 1 字节. 
*** char
存放字符, 通过 ASCII 编码实现对应转化, 一般为 1 字节.

分是否带符号, 对应不同系统. 如果是标准的 ASCII 则没有关系
*** int
大多数为 32 位. 16, 32, 64

| 类型                   | 位宽 | 表示范围         |
|------------------------+------+------------------|
| short int              |   16 | -2^15 ~ 2^15 - 1 |
| unsigned short int     |   16 | 0 ~ 2^16 - 1     |
| int                    |   32 | -2^31 ~ 2^31 - 1 |
| unsigned int           |   32 | 0 ~ 2^32 - 1     |
| long int               |   32 | -2^31 ~ 2^31 - 1 |
| unsigned long int      |   32 | 0 ~ 2^32 - 1     |
| long long int          |   64 | -2^63 ~ 2^63 - 1 |
| unsigned long long int |   64 | 0 ~ 2^64 - 1     |

其中 int, signed, int signed, signed int 表示同一类型.
而 unsigned long 和 unsigned long int 表示同一类型.
可以省略编写.

042 八进制, 34.
0x42 十六进制, 66. 
*** float
单精度浮点, 32 位. 
范围比较少, 精度不高. 

大小在 -3.4 x 10^38 和 3.4 x 10^38 之间. 
*** double
双精度浮点, 64 位.
范围 -1.7 x 10^-308 到 1.7 x 10^308 之间.
*** void
无类型, 不能直接声明, 仅表示空返回值. 
*** 类型转换
**** 类型提升
1. 符号类型不同, 长度的转换, 参考补码
2. char 和 short 类型运算会自动提升为 int.
3. unsigned short 进行运算也会自动提升了 unsigned int.
4. 对 long long 参数(包括整型)函数传入 int 值时, 会被自动提升为位宽较大的变量.
5. 浮点参数也会对应进行提升, float 变 double.
6. bool 可以被提升为整形, 对应 0, 1.
**** 数值转换
1. 位大的浮点转换, 会取最接近的值
2. 浮点数转换为整数时, 会舍弃浮点数的全部小数部分
3. 整数转换为浮点数时, 会舍入到目标类型下最接近的值
4. 各种类型转 bool, 零值为 false, 其他为 true. 
** 变量
通过括号区分全局作用域和局部作用域.

如果内层作用域与全局作用域有同名变量, 内层无法访问到外层块中相同变量名的变量.

常量需要在定义时候加上 ~const~ . 
** 运算
运算时类型不以智慧自动转换, 按序触发判断:
1. char, bool, short 等类型提升为 int.
2. 如果存在 long double, 另一个也会被同化. double, float 同理.
3. 如果都为整型.
   1. 如果符号一致, 位宽转换为最大的.
   2. 如果无符号的不小于带符号的位宽, 则带符号的转换为无符号数对应类型. 
** pragam
** extern, static
extern 描述外部全局变量, 仅做声明不分配内存.
告知编译器在别处定义. 

static 修饰的全局变量只能在本文件访问(object file).
延长局部变量寿命, 直到程序结束.

全局变量默认有外部链接, 作用域是整个工程. 

* 文件类型
** cpp
可以把所有东西放到 cpp 里,  对应一个编译单元 obj.

obj 之间通过引用链接起来, 通过 ~extern~ 和 ~static~ 申明内部函数的作用域

header file 用来包含这些描述信息, 被引用的时候只需要吧 header file include 进去

 ~#include~ 只是指定文件内容, 原封不动的考进来
** header file
 ~*.hpp~ 是 cpp 专用

~*.h~ 是 c/cpp 通用头文件

可以做成通用, 同时根据宏支持 cpp 特性
#+begin_src cpp
  #ifndef MY_HEADER_H
  #define MY_HEADER_H

     #ifdef __cplusplus
        extern "C"
        {
     #endif

     void myCFunction() ;

     #ifdef __cplusplus
        } // extern "C"
     #endif

  #endif // MY_HEADER_H
#+end_src
 
* c++ 弃用特性(11 之后)
- 不允许字面常量带 ~*~ 
  如果有需要初始化一个  ~char *~, 应该使用 ~const char *~ 或者 ~auto~. 
- 异常说明 unexpected_handler, set_unexpected() 等相关特性被弃用, 应该使用 noexcept

* C++ 11 新特性
** noexcept
告诉编译器绝对不会发生异常, 有利于编译器优化, 不影响正确性, 暂时不用
#+begin_src cpp
  void f() noexcept; // the function f() does not throw
  void (*fp)() noexcept(false); // fp points to a function that may throw
#+end_src
* 编译
** 预处理 Preprocessing, ~cpp~ / ~gcc -E~
预处理指令以 ~#~ 开头, 常用的:
- ~#ifdef~ 判定保留
- ~#define~ 宏替换
- ~#include~ 插入对应的源码

标记对应行数文件, 为之后的错误信息

** 编译和汇编 Compilation,  Assembly, ~cc1~ / ~gcc -s~, ~as~ / ~gcc -c~
去除预编译指令之后的纯 cpp 代码编译称为底层的汇编代码:
- 语法识别,
- 检查优化

汇编器吧汇编代码转换为机械码.

可分开编译打包, 生成静态库, 给其他包调用.

编译和汇编最终生成目标文件 object file, 也就是机械码
** 链接 Linking ~ld~
链接器将编译器产物的引用替换成对应的 object file 链接起来
** 产物

| .c　　　　     | C 源程序　　　　　　  | 　　预处理，编译，汇编       |
| .C　　　　     | C++源程序　　  　　　 | 　预处理，编译，汇编         |
| .cc　　　　    | C++源程序　　         |                              |
| .cxx 　　　    | C++源程序　　　       | 　  　　预处理，编译，汇编   |
| .m 　　　　    | Objective-C 源程序    | 　　　预处理，编译，汇编     |
| .i 　　　　    | 预处理后的 C 文件　　 | 　　编译，汇编               |
| .ii　　　　    | 预处理后的 C++文件    | 　　　编译，汇编             |
| .s　　　　　   | 汇编语言源程序　　    | 　　　汇编                   |
| .S　　　　　   | 汇编语言源程序　　    | 　　　预处理，汇编           |
| .h　　　　　　 | 预处理器文件　　　    | 　　　通常不出现在命令行上　 |
** 工具
gcc 默认处理 C 文件, 设定 C 链接

g++ 默认处理 CPP 文件, 设定 CPP 链接

#+begin_src bash
  # console preprocessing result cpp
  g++ -E hello-word.cpp

  # build cpp to object file, hello-world.o
  g++ -c hello-word.cpp

  # linking object file
  g++ -o myexecutable hello-word.o

#+end_src
* 标准库
** stdio
 ~fprintf~ 
