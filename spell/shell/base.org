#+STARTUP: all
#+SETUPFILE: ~/.emacs.d/org-styles/html/main.theme
#+TITLE: base
#+DATE: [2021-01-05 21:43]
* Refers
- https://linuxtools-rst.readthedocs.io/zh_CN/latest/index.html
- https://effective-shell.com/
- https://talk.linuxtoy.org/using-cli
* syntax
参数
#+begin_src shell
  echo "Shell 传递参数实例！";
  echo "执行的文件名：$0";
  echo "第一个参数为：$1";
  echo "第二个参数为：$2";
  echo "第三个参数为：$3";
  echo "参数个数为$#"
  echo "所有参数$@"
  echo "所有参数$*"
  echo "进程号$$"
#+end_src

default
#+begin_src shell
  # return default if missing
  FOO="${VARIABLE:-default}"

  # set default if missing
  FOO="${VARIABLE:=default}" 
#+end_src

判断
#+begin_src shell
  if [ $a -le $b ]
  then
      echo "$a -le $b: a 小于或等于 b"
  else
      echo "$a -le $b: a 大于 b"
  fi
#+end_src

非空
#+begin_src shell
  [ test -z "$word" ]
  [ ! -n "$word" ]
  [ ! "$word" ]
  [ "" = "$word" ]
#+end_src
* spells
** du

Human-readable
depth

#+begin_src shell
  du -h -d 1 .
#+end_src
    
* tools
** cloc Count Lines of Code

从 Draven blog 里看到的, 统计词数
*  set -o allexport
env 失效问题根源, 需要允许 env 相关 source 来源允许导出
* count
#+begin_src shell
  grep -o "[0-9]\+\.[0-9]\+\.[0-9]\+\.[0-9]\+" httpd.log | sort | uniq -c | sort -n
  cat demo.txt | awk '{print $2}' | sort | uniq -c | sort -n -r | head -n 1
#+end_src
   
awk '{ print $2}'：取数据的第 2 域（第 2 列）, 第一列是标号（1, 2, 3...）,第二列是 ip 地址

sort：对 IP 部分进行排序。

uniq -c：打印每一重复行出现的次数。（并去掉重复行）

sort -n -r：按照重复行出现的次序倒序排列。

head -n 1：取排在第一位的 ip 地址
* grep
* awk
逐行分割遍历
#+begin_src bash
    awk [options] 'script' file1 file2, ...
    awk [options] 'PATTERN {acticon}' file1 file2, ...
#+end_src
常用 options:
- FS：split char, -F
- OFS：ending, -v
- NF：column count
- NR：row number

condtion pattern, ~&&~, ~||~ 
#+begin_src bash
  awk -F '#' 'NF==5 {print $1}' test
#+end_src
#+begin_src bash
  echo something | awk '{ print $1 }'
#+end_src
* sed
会先读取到缓冲区
#+begin_src bash
  sed [options]... 'script' inputfile
#+end_src
- d 删除模式空间匹配的行, 并立即启用下一轮循环
- p 显示符合条件的行, 追加到默认输出之后
- a [\]text 在指定行后面追加文本,支持使用\n 实现多行追加
- i [\]text 在行前面插入文本
- c [\]text 替换行为单行或多行文本
- w /path/somefile 保存模式匹配的行至指定文件
- r /path/somefile 读取指定文件的文本至模式空间中匹配到的行后
- = 为模式空间中的行打印行号
- ! 模式空间中匹配行取反处理
- s///：查找替换,支持使用其它分隔符, s@@@, s###


#+begin_src shell
  sed -n 2,5p test
  git diff --name-only | sed -E '*.org'
#+end_src

Edit
#+begin_quote
mac 会报错, 必须指定一个 output 备份名  
sed -i '.bak' '2s/a/v/g' test
#+end_quote
* xargs
#+begin_src bash
  xargs git branch -d < ./branch.txt
  awk | xargs kill -9
  # 参数
  ls -d ./* | xargs -i {} cp {} ~/tmp
#+end_src
* find
通配文件检索
#+begin_src shell
  find ./**/*.org -type f
#+end_src
regex
#+begin_src shell
  # mac
  find -E output -regex ""
  # unix
  find output -regextype posix-extended -regex ""
#+end_src
* wc
#+begin_src shell
  wc -wl
#+end_src
* scp
#+begin_src shell
  scp -P 2222 file.ext username@domain:~/ 
#+end_src
到本地
#+begin_src sh
  scp username@domain:~/file.ext .
#+end_src
* tail
监听文末
#+begin_src shell
  tail -n 100 -f some_file
#+end_src
* crontab
定时任务
#+begin_src bash
  # edit base on EDITER
  crontab -e 
  # list
  crontab -l
  # remove
  crontab -r
#+end_src

#+begin_quote
注意环境, nvm 或者 node 不一定有. 
#+end_quote

demo
#+begin_src bash
  */1 * * * * /bin/date >> /Users/arius/lib/crontab-test/console   
#+end_src

mac 需要增加权限,  ~System Preferences > Security & Privacy > Privacy > Full Disk Access~  :
- /usr/sbin/cron
- /Applications/Utilities/terminal.app
* if
#+begin_src sh
  # if test -z "$var" 
  if [ -z "$var" ]
  then
        echo "\$var is empty"
  else
        echo "\$var is NOT empty"
  fi
#+end_src

test 可以用括号省略, 换行可以用 ~;~ 代替.
一般为  ~if ... then ... elif ... then ... else ... fi~ 

单行
#+begin_src sh
  [ -z "$var" ] && echo "Empty" || echo "Not empty"
#+end_src
* test
数值:
- ~-eq~ 等于则为真
- ~-ne~ 等于则为真
- ~-gt~ 于则为真
- ~-ge~ 于等于则为真
- ~-lt~ 于则为真
- ~-le~ 于等于则为真

字符串:
- ~=~ 等于则为真
- ~!=~ 不相等则为真
- ~-z~ 字符串的长度为零则为真
- ~-n~ 字符串的长度不为零则为真

文件:
- ~-e~ 如果文件存在则为真
- ~-r~ 如果文件存在且可读则为真
- ~-w~ 如果文件存在且可写则为真
- ~-x~ 如果文件存在且可执行则为真
- ~-s~ 如果文件存在且至少有一个字符则为真
- ~-d~ 如果文件存在且为目录则为真
- ~-f~ 如果文件存在且为普通文件则为真
- ~-c~ 如果文件存在且为字符型特殊文件则为真
- ~-b~ 如果文件存在且为块特殊文件则为真
* COMMENT ~[] [[]] () (()) {} {{}}~
- ~()~ 相当于 command, 包括一个指令, 指令与括号之间没有空格
  - ~$()~ 会立即执行一次得到标准输出
- ~(())~
  - 整数计算, 类似 boolean 或状态码转换为数字, 返回 1/0
  - 进制转换  ~$((16#5f))~
  - 可算术比较( ~<>+=~ ), 变量运算不需要  ~$~ , eg: ~a=5; ((a++))~ ,

    
- ~[]~ test 
- ~[[]]~ 比 test 更通用的比较
  - 匹配字符串不需要引号, 支持通配, eg:  ~[[ hello == hell? ]]~
  - 支持  ~&&~  ~||~ 等

- ~{}~ 通配, eg:  ~ls {ex[1-3],ex4}.sh~, ~touch {a..d}.txt~

替换
  - var 为空时替换
    - ~${var:=string}~ 还会给 var 赋值不只是替换表达式
    - ~${var:-string}~ 替换完表达式, var 还是空
  - 不为空时替换, ~${var:+string}~
  - 不为空时报错 string 然后退出, ~${var:?string}~

匹配替换  ~#%~
#+begin_src shell
  # var=testcase    
  # echo $var    
  testcase    
  # echo ${var%s*e}   
  testca    
  # echo $var    
  testcase   
  # echo ${var%%s*e}   
  te  
  # echo ${var#?e}    
  stcase  
  # echo ${var##?e}    
  stcase  
  # echo ${var##*e}    
  
  # echo ${var##*s}    
  e    
  # echo ${var##test}    
  case    
#+end_src

字符串替换
#+begin_src sh
  # var=/home/centos  
  # echo $var  
  /home/centos  
  # echo ${var:5}  
  /centos  
  # echo ${var: -6}  
  centos  
  # echo ${var:(-6)}  
  centos  
  # echo ${var:1:4}  
  home  
  # echo ${var/o/h}  
  /hhme/centos  
  # echo ${var//o/h}  
  /hhme/cenths  
#+end_src
* curl
下载 + 执行
#+begin_src bash
  curl -fsSL http://<some-host>/install.sh | sudo -E bash -
#+end_src
* 系统判断
三种方式, uname 不准 
#+begin_src bash
  cat /proc/version
  ## Linux version 5.4.0-94-generic (buildd@lcy02-amd64-059) (gcc version 7.5.0 (Ubuntu 7.5.0-3ubuntu1~18.04)) #106~18.04.1-Ubuntu SMP Fri Jan 7 07:23:53 UTC 2022
  lsb_release -a
  # No LSB modules are available.
  # Distributor ID: Ubuntu
  # Description:    Ubuntu 18.04.6 LTS
  # Release:        18.04
  # Codename:       bionic
  ls /etc/*-release
  # /etc/lsb-release  /etc/os-release
  cat /etc/os-release
  # NAME="Ubuntu"
  # VERSION="18.04.6 LTS (Bionic Beaver)"
  # ID=ubuntu
  # ID_LIKE=debian
  # PRETTY_NAME="Ubuntu 18.04.6 LTS"
  # VERSION_ID="18.04"
  # HOME_URL="https://www.ubuntu.com/"
  # SUPPORT_URL="https://help.ubuntu.com/"
  # BUG_REPORT_URL="https://bugs.launchpad.net/ubuntu/"
  # PRIVACY_POLICY_URL="https://www.ubuntu.com/legal/terms-and-policies/privacy-policy"
  # VERSION_CODENAME=bionic
  # UBUNTU_CODENAME=bionic
  cat /etc/lsb-release
  # DISTRIB_ID=Ubuntu
  # DISTRIB_RELEASE=18.04
  # DISTRIB_CODENAME=bionic
  # DISTRIB_DESCRIPTION="Ubuntu 18.04.6 LTS"
  ldd --version
  # ldd (Ubuntu GLIBC 2.23-0ubuntu11.3) 2.23
  # Copyright (C) 2016 Free Software Foundation, Inc.
  # This is free software; see the source for copying conditions.  There is NO
  # warranty; not even for MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
  # Written by Roland McGrath and Ulrich Drepper.
#+end_src
* 指令判断
#+begin_src bash
  echo $0
#+end_src
* lsof
list open files 一切皆文件. 系统会为每个应用分配一个描述符, 除了文件像 TCP, UDP 也有. 

#+begin_src bash
  # 查看进程
  lsof /bin/bash
  # 查看用户打开的文件
  lsof -u username -c mysql
  # 网络和接口
  lsof -i tcp :3306
#+end_src

处理空格文件名
#+begin_src bash
  find . -type d | while IFS= read -r dir; do
      echo "Processing: \"$dir\""
  done
#+end_src
* multi line
#+begin_src bash
  USAGE=$(cat <<-END
      This is line one.
      This is line two.
      This is line three.
  END
  )
#+end_src
* trap
Catch exit signal
#+begin_src bash
  trap ctrl_c INT
  function ctrl_c() {
      echo 'exit'
      exit
* history
No 100 command in history
#+begin_src bash
  !100
#+end_src

Easy search
#+begin_src bash
  hi() {
      keyword=$1
      if [ $keyword ]; then
          history -i | grep $keyword
      else
          history -i -100
      fi
  }
#+end_src

Settings
#+begin_src bash
  echo $HISTSIZE
  echo $HISTFILE
  echo $SAVEHIST # zsh
  echo $HISTFILESIZE # bash
#+end_src

Reference:
1. ~!!~
2. ~!?[-string]~
3. ~![-number]~
4. ~!:[number-number]~ last argument
* construct string {}
#+begin_src bash
  echo {1..10..-2}
  # 9 7 5 3 1
#+end_src
* command string replacement
#+begin_src bash
  grep -l . *.el
  vim `grep -l . *.el`
  vim $(grep -l . *.el)
#+end_src
* iteration
#+begin_src bash
  % cd /usr/share/figlet
  % for font in *.flf
  > do
  >   echo $font
  >   figlet -f $font Linux
  > done
#+end_src
