#+STARTUP: content
* info
** Refers
   - https://mp.weixin.qq.com/s/lPbag5EbuWPUZOCvObW-yw
   - https://medium.com/swlh/what-is-raii-e016d00269f9
  
** 有谁在使用
   
*** Dropbox
    #+begin_quote
    Rust 是我们团队的力量倍增器，使用 Rust 是我们做出的最正确的决定之一。
    除了性能，它的人机工程学和对准确性的保证帮助我们降低了同步的复杂性。
    我们可以在类型系统中对系统的复数不变量进行编码，并让编译器为我们检查它们
    #+end_quote

*** Figma
    Figma 是一个基于 web 的矢量图形和界面原型设计工具。
    他们选择在 Rust(以前用的是 TypeScript)中重写他们的多人同步引擎以提高性能，因为他们的服务器能力已经无法满足用户的增长速度需求了。
    #+begin_quote
    我们选择用 Rust 进行重写，因为它在同类语言中有着最好的速度和较低的资源使用率，同时还具有标准服务器语言的安全性。
    低资源使用率对我们来说特别重要，因为旧服务器的一些性能问题是由垃圾回收器导致的，而 Rust 不会有这个问题。
    #+end_quote

*** npm
    npm 是一个 JavaScript 的包管理器。
    之所以它的工程师团队选择用 Rust 重写他们的主要服务，是因为他们意识到，如果用户继续增长，服务器的性能很快就会成为瓶颈。
    他们拒绝使用像 C 和 C++这样的技术，因为他们觉得 C 和 C++处理不好 web 公共服务的内存管理问题。
    npm 不使用 Java 的原因，是因为 java 需要在服务器上部署 JVM。
    #+begin_quote
    npm 面临的挑战只有高效和可伸缩的解决方案才能解决。
    假如一个服务部署后就不用关心它的存在，便可以节省工程师宝贵的研发时间，让他们关注其他问题。
    npm 员工也很重视一种技术生态中是否有对其提供帮助的技术社区。
    Rust 符合所有这些标准，所以 Rust 现在是 npm 的技术堆栈之一。
    #+end_quote

*** 其他
    - Microsoft
    - Facebook
    - Amazon
    - Discord

** 特色
*** 内存安全
    安全是 Rust 的核心.
    类型安全, 类型系统保证程序行为是意义明确, 不出错的.
    诸多编程语言中, OCaml 和 Haskell 是公认的类型安全的典范.

    Rust 借鉴了他们的类型系统,保证类型安全, 尤其是 Haskell.

    此外还需要实现一套内存管理模型, 实现不会出现内存访问错误问题.

    内存访问错误源头:
     - 使用空指针.
     - 为初始化内存.
     - 释放后使用, 垂悬指针.
     - 缓冲区溢出, 如数组越界
     - 重复释放, 非法释放已经是释放的指针
       
    发生原因, 访问了未定义内存.

    Rust 的内存管理模型:
    - 所有权系统, 每个被分配的内存都有一个独占其所有权的指针.
      只有当该指针被销毁, 其对应内存才随之释放.
    - 借有和生命周期.
      - 变量有生命周期, 超出生命周期, 变量自动释放.
      - 借由: 可以通过标记生命周期参数供编译器检查的方式, 防止悬垂指针.
	释放后使用.

  所有权系统保障了可以安全管理内存不需要 GC, 借鉴了 C++ 的 RAII 机制.
     
*** 零成本抽象

*** 实用性

** More
   
*** RAII resource acquisition is initialization

    C++ (如果不使用 RAII) 在使用类似 堆内存, 文件, sockets, mutexes 锁 等资源时, 先请求在使用.
    在函数结构使用完后, 需要对应的 ~delete~ 或者 ~release~.
    像出现 ~throw~ 或者其他情况返回也需要对应资源进行处理.

    C++ 规范不建议写 ~new~, ~delete~.
    应该用 RAII 对象管理内存.
    RAII 使用可以不用担心资源生命周期, 关注在对象生命周期.
    从实体资源到抽象.
