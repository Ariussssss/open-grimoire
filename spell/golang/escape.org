#+STARTUP: content
#+CREATED: [2021-05-18 11:17]
* escape analysis 逃逸分析
** Refers
   - https://www.ardanlabs.com/blog/2017/05/language-mechanics-on-escape-analysis.html
   - https://studygolang.com/articles/10026


** 简析
   golang excape 逃逸分析是编译器决定变量分配到对上还是栈上的行为.
   
   时机: 变量构建的时候不能决定存储位置是栈还是堆, 
   golang 没有提供对应的关键字和方法.
   只有当被共享的时刻,
   编译器才能知道如何处理这个值.
   
** 作用
   - 减轻 gc 压力, 栈函数运行结束即可回收
   - 栈内存轻量级, 更好分配
   - 同步消除, 如果有同步锁, 代码只有一个 goroutine 调用, 逃逸后可以去掉锁运行
   
** 原理
   
*** 堆
    需要在运行时 GC, 所有存储的变量都需要被关联, 保持干净.
    需要执行 GC 时, 会占用 25% 的 cpu, 然后产生 "stop the world" 的毫秒级延迟.
    所以越多的变量存在堆里面, GC 就会有越多的值需要遍历, 影响性能.

*** 共享栈
    goroutine 可以使用其他 goroutine 栈中的内存的指针.
    因为 goroutine 栈的内存可以被新的内存覆盖, 扩张或者压缩, 运行时难以管理.
   
*** 逃逸机制
    *当一个值被分享给外层, 函数作用域的栈以外时, 会被移动到堆里.*
    逃逸分析算法负责找到那些需要逃逸的场景, 并维持完整性.

    一般来说, 直接返回值的时候, 变量会被函数创建和复制到执行的作用域.
    接收到的是一份复制而不是原来的值.

    同时因为是值复制, 所以 defer 的行为不会影响到已经复制返回的结果.

    当触发内部的值被分享时, 值会被移动到堆上.
    同时因为指针返回后被移动到栈上, 返回的变量会逃逸, 变成一个新的独立的变量到堆上.

    #+begin_src go
      package main

      import (
	      "fmt"
      )

      type Demo struct {
	      A int
      }

      func demof1() {
	      demo := Demo{1}
	      a1, a2 := demof2(demo)
	      fmt.Println(a1, a2, a1 == &a2)
      }

      func demof2(demo Demo) (*Demo, Demo) {
	      nick := demo
	      defer func(demo *Demo) {
		      demo.A += 1
	      }(&nick)

	      return &nick, nick
      }

      func main() {
	      demof1()
      }
    #+end_src

    #+begin_src bash
      Aiur❯ go run -gcflags "-m -l" excape-demo.go
      # command-line-arguments
      ./excape-demo.go:19:13: demo does not escape
      ./excape-demo.go:18:2: moved to heap: nick
      ./excape-demo.go:19:8: func literal does not escape
      ./excape-demo.go:14:13: ... argument does not escape
      ./excape-demo.go:14:13: a2 escapes to heap
      ./excape-demo.go:14:25: a1 == &a2 escapes to heap
      &{2} {1} false
    #+end_src
    

    内存过大也会触发逃逸.

