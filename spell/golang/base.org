#+STARTUP: content
#+CREATED: [2021-05-18 11:56]
* golang 基础相关
** Refers
   - https://github.com/chai2010/go-ast-book
   - https://golang.org/doc/effective_go.html
   - https://github.com/bingohuang/effective-go-zh-en chinese
   - https://go-zh.org/
   - https://blog.golang.org/
   - https://golang.org/pkg/ standard pkg
   - https://quii.gitbook.io/learn-go-with-tests/
   - https://dmesg.app/from-pyhon-to-go.html python to go
   - https://github.com/hantmac/Mastering_Go_ZH_CN
   - https://github.com/unknwon/the-way-to-go_ZH_CN/blob/master/eBook/01.2.md
   - https://geektutu.com/post/quick-golang.html
   - https://github.com/thinkboy/go-notes/blob/master/%e4%bb%8e%e6%ba%90%e7%a0%81%e8%a7%92%e5%ba%a6%e7%9c%8bGolang%e7%9a%84%e8%b0%83%e5%ba%a6.md#%e8%b0%83%e5%ba%a6%e5%99%a8%e7%9a%84%e4%b8%89%e4%b8%aa%e6%8a%bd%e8%b1%a1%e6%a6%82%e5%bf%b5gmp
   - https://github.com/rubyhan1314/Golang-100-Days
   - https://mp.weixin.qq.com/s/SuYSo_APH2viuWiVxezyVQ context
   - https://golang2.eddycjy.com/
   - https://github.com/talkgo/read index
   - https://tiancaiamao.gitbooks.io/go-internals/content/zh/
   - https://gfw.go101.org/article/101.html
** syntax
   字符串使用 UTF8 编码吗，英文字符占 1 byte，中文 3 byte， 节省空间

   查看类型 ~reflect.TypeOf().Kind()~ 

   切片，抽象数组，分配空间，需要用 ~make~ 定义, ~len, cap~ 测量， ~[start:end]~ 

   函数内部默认是值传递，如果不使用指针的话，会拷贝一份，如果是指针，会影响到外部变量。 

*** 错误
    Go 语言没有提供 ~try..catch~ 使用 ~defer~ 和 ~recover~ 机制。

    #+begin_src go
      func get(index int) int {
	      arr := [3]int{2, 3, 4}
	      return arr[index]
      }

      func main() {
	      fmt.Println(get(5))
	      fmt.Println("finished")
      }
      // $ go run .
      // panic: runtime error: index out of range [5] with length 3
      // goroutine 1 [running]:
      // exit status 2
      func get(index int) (ret int) {
	      defer func() {
		      if r := recover(); r != nil {
			      fmt.Println("Some error happened!", r)
			      ret = -1
		      }
	      }()
	      arr := [3]int{2, 3, 4}
	      return arr[index]
      }

      func main() {
	      fmt.Println(get(5))
	      fmt.Println("finished")
      }

      // $ go run .
      // Some error happened! runtime error: index out of range [5] with length 3
      // -1
      // finished
    #+end_src

** goroutine 并发

*** sync

    等待 +1, 去掉 -1, 可以用 ~wg.Wait~ 等待所有协程执行结束。

    #+begin_src go
      import (
	      "fmt"
	      "sync"
	      "time"
      )

      var wg sync.WaitGroup

      func download(url string) {
	      fmt.Println("start to download", url)
	      time.Sleep(time.Second) // 模拟耗时操作
	      wg.Done()
      }

      func main() {
	      for i := 0; i < 3; i++ {
		      wg.Add(1)
		      go download("a.com/" + string(i+'0'))
	      }
	      wg.Wait()
	      fmt.Println("Done!")
      }
    #+end_src

*** channel

    阻塞等待并发协程返回消息。
    #+begin_src go
      var ch = make(chan string, 10) // 创建大小为 10 的缓冲信道

      func download(url string) {
	      fmt.Println("start to download", url)
	      time.Sleep(time.Second)
	      ch <- url // 将 url 发送给信道
      }

      func main() {
	      for i := 0; i < 3; i++ {
		      go download("a.com/" + string(i+'0'))
	      }
	      for i := 0; i < 3; i++ {
		      msg := <-ch // 等待信道返回消息。
		      fmt.Println("finish", msg)
	      }
	      fmt.Println("Done!")
      }
    #+end_src

*** 类名转换
    #+begin_src go
      package command// Deprecated: Use github.com/docker/cli/cli/streams.In instead
      type InStream = streams.In
      type T2 struct {}

      // T2 is deprecated, please use T1
      type T1 = T2

      func main() {
	 var t T1
	 f(t)
      }

      func f(t T1) {
	 // print main.T2
	 println(reflect.TypeOf(t).String())
      }
    #+end_src

** Loading
   - 按 ~import~ 的顺序逐个加载
   - 声明常量
   - 声明变量
   - 执行 ~init~
   - 如果是 ~main~ 包则执行 ~main~

** unit test
   
   同名文件，直接调用同名文件函数和方法。

   #+begin_src go
     // calc.go
     package main

     func add(num1 int, num2 int) int {
	     return num1 + num2
     }

     // calc_test.go
     package main

     import "testing"

     func TestAdd(t *testing.T) {
	     if ans := add(1, 2); ans != 3 {
		     t.Error("add(1, 2) should be equal to 3")
	     }
     }
   #+end_src

   ~go test [-v]~ 详细参数 ~-v~

** happens before
   写操作对于变量的修改能够被读操作感知, 那么就会触发

   条件:
   1. 写操作发生在读操作之前
   2. 有其他写操作作用于共享变量, 发生在写之后, 读之前

** Debug
   ~-gcflags="-m"~ 打印内存逃逸情况.
   ~-gcflags="-s"~ 打印生成的汇编代码.
   Exp: ~go tool compile -S escape.go | grep escape.go:10~

   其中 ~gcflags~ 的参数是传给 [[https://golang.org/cmd/compile/][go compile]] 的.
   常用的:
   - ~-l~ 禁用 inline 转换, 保留行数.
   - ~-m~ 打印优化决策.
   - ~-S~ 打印编译输出. 

** 错误处理
   协程直接 panic 无法 recover, 单个协程 panic 会导致所有协程挂

   解决办法就是每个协程自己处理 recover

** slice
   capacity 为制定默认为 1
   slice 每次 append 扩容 x2

   如果知道长度直接 make 不需要扩容, 直接通过下标操作

   初始化连续内存, 其指针会连续, 效率会快

** switch case
   随机运气选择, 多个允许的话

** lock
   主要分为 互斥(Mutex) 和读写(RWMutex)

   读锁可以并行, 读和写互斥
