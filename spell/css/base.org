#+STARTUP: content
#+SETUPFILE: ~/.emacs.d/org-styles/html/main.theme
#+TITLE: base
#+DATE: [2021-07-05 10:31]
* Refers
* animation
   ~animation-timing-function~ 默认是 ease, 常用的还有 ~step(n, end)~
* ninja
** 打字效果
   #+begin_src css
     .wrapper {
       height: 100vh;
       /*This part is important for centering*/
       display: flex;
       align-items: center;
       justify-content: center;
     }

     .typing-demo {
       width: 22ch;
       animation: typing 2s steps(22), blink .5s step-end infinite alternate;
       white-space: nowrap;
       overflow: hidden;
       border-right: 3px solid;
       font-family: monospace;
       font-size: 2em;
     }

     @keyframes typing {
       from {
	 width: 0
       }
     }
    
     @keyframes blink {
       50% {
	 border-color: transparent
       }
     }
   #+end_src
   #+begin_src html
     <div class="wrapper">
	 <div class="typing-demo">
	   This is a typing demo.
	 </div>
     </div>
   #+end_src
** css 绘制增强
通过 css worklet 加载, 然后使用 ~registerPaint~ 监听执行
https://developer.mozilla.org/en-US/docs/Web/API/PaintWorklet/registerPaint

曲线属性 demo https://github.com/hazmi/curved-line
#+begin_src html
    <script>
     ;(async function() {
       if (CSS['paintWorklet'] === undefined)
         await import('https://unpkg.com/css-paint-polyfill@next/dist/css-paint-polyfill.js')

       CSS.paintWorklet.addModule('https://unpkg.com/curved-line@1.0.0/curved-line.js')
     })()
    </script>
#+end_src

#+begin_src js

  if (typeof registerPaint !== "undefined") {
    class CurvedLine {
      static get inputProperties() {
        return [
          "--curved-lineColor",
          "--curved-lineSpread",
          "--curved-lineWidth",
          "--curved-lineHeight",
        ];
      }

      paint(ctx, size, properties) {
        const lineWidth = parseInt(properties.get('--curved-lineWidth')) || 3;
        const lineHeight = parseInt(properties.get('--curved-lineHeight')) || size.height;
        const color = String(properties.get('--curved-lineColor')) || 'black';
        const spread = parseInt(properties.get('--curved-lineSpread')) || 50;

        const offset = (lineHeight < size.height) ? (size.height - lineHeight) / 2 : 0;
        const midPoint = lineHeight / 2;

        ctx.lineWidth = lineWidth;
        ctx.strokeStyle = color;
        ctx.beginPath();
        ctx.moveTo(0, midPoint + offset);
      
        let curStep = spread;
        while (curStep < size.width + spread) {
          const cp1x = curStep;
          const cp1y = (lineHeight * 1.5) + offset;
          const cp2x = curStep + spread;
          const cp2y = 0 - midPoint + offset;
          const x = curStep + spread * 2;
          const y = midPoint + offset;

          ctx.bezierCurveTo(cp1x, cp1y, cp2x, cp2y, x, y);
          curStep = curStep + (spread * 3);
        }
        ctx.stroke();
      }
    }

    registerPaint("curved-line", CurvedLine);
  }
#+end_src
** 气泡, 火焰, 波浪特效
1. 图形是在被设置了 ~filter: contrast() 的画布背景上进行动画的
2. 进行动画的图形被设置了 ~filter: blur()~ (进行动画的图形的父元素需要是被设置了 filter: contrast() 的画布)
