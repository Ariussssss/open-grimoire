#+STARTUP: all
#+SETUPFILE: ~/.emacs.d/org-styles/html/main.theme
#+TITLE: gil
#+DATE: [2023-01-10 13:01]
* Refers
* 线程安全
:PROPERTIES:
:CUSTOM_ID: 线程安全
:END:
** 不安全原因
:PROPERTIES:
:CUSTOM_ID: 不安全原因
:END:
多个线程访问同一个资源，造成的资源竞争和使用混乱

局部变量不会被多线程处理，会存储在自己线程的栈里 线程安全

* GIL
:PROPERTIES:
:CUSTOM_ID: gil
:END:
Global Interpreter Lock CPython 解释器特性 保证同一时间内只有一个线程执行

threading in python

1. 获取 GIL
2. 执行代码
3. 释放 GIL

线程要想执行，必须拿到 GIL 可以看作通行证一样 python 进程中只有一个 GIL
所以没有 GIL 的线程不会被 CPU 执行

每次释放 GIL，线程进行锁竞争，切换线程 会消耗资源
GIL 锁存在，python 中进程永远只能同时执行一个线程
即使在多核 CPU 中，python 多线程效率不高

单线程中，释放 GIL 后，唤醒的线程肯定能获得 GIL
多核中释放 GIL 后，其他 CPU 会进行竞争
只有一个线程得到，唤醒的其他 CPU 的线程再次等待，变成待调度状态
线程颠婆(thrashing)效率很低

使用选择

1. 对于 CPU 密集的代码，循环处理，计数，ticks 到阀值，会触发释放竞争，不友好
2. 对 IO 密集的代码，文件处理，网络爬虫 IO 等待时，会有时间浪费
   开启多线程时，会自动切换到其他线程 不浪费 CPU 提高效率，友好

Python3.x 中，GIL 不使用 ticks 计数，改用计时器
执行时间到达阀值再释放竞争，稍微改善 CPU 密集代码执行效率

因此对于 python 来说，多进程在多核状态下，提升效率更为显著

** 与线程互斥锁
:PROPERTIES:
:CUSTOM_ID: 与线程互斥锁
:END:
线程锁是代码层的锁，解决多线程资源共享问题
多线程数据共享，资源竞争，数据混乱

GIL 是解释层的锁 解决多线程的竞争资源问题
