a#+STARTUP: all
#+SETUPFILE: ~/.emacs.d/org-styles/html/main.theme
#+TITLE: python 基础
#+DATE: [2021-04-06 10:33]
* Refers
   - https://github.com/trekhleb/learn-python 速查表
* grammar
** dict
[[https://mail.python.org/pipermail/python-dev/2017-December/151283.html][Dict keeps insertion order]] in 3.7

#+begin_src python
  a = dict(name=2)

  a.get('name1', 3)
  print(a.pop('name'))
#+end_src

** map array
  #+begin_src python
    [x * 4 for x in [1]]

    for i, a in enumerate(['a']):
	print(i, a)

    for i in range(1, 10):
	print(i)
  #+end_src
** heapq
    #+begin_src python
      import heapq

      # initializing list 
      li = [5, 7, 9, 1, 3] 
  
      # using heapify to convert list into heap 
      heapq.heapify(li) 
    #+end_src
* type
** demo
#+begin_src python
  from typing import Dict, List, Tuple, Any

  primes: List[int] = [2,3,5,7,11,13]

  primes_dict: Dict[str, int] = {
      "two": 2,
      "three": 3,
      "five": 5,
      "seven": 7,
      "eleven": 11,
      "thirteen": 13
  }

  isPrime_tuple: Tuple[str, int, bool] = ("one", 1, False)

  Vector = Tuple[float,float,float]

  vector: Vector = (1.0,1.0,1.0)

  Matrix = Tuple[Vector,Vector,Vector]
  matrix: Matrix = (
      (1.0,0.0,0.0),
      (0.0,1.0,0.0),
      (0.0,0.0,1.0)
  )

  def s(a: List[str]) -> str:
      return "".join(a)
#+end_src
* math
   阶乘
   #+begin_src python
     math.factorial(23)
   #+end_src
* GIL global interpreter lock 全局解释器
   解释器相关, 每个线程解释器在执行字节码的时候需要获取锁.

   锁对单独进程, 全局仅限制进程内, 不影响多核多进程.
   所以推荐使用协程或者多进程. 
* pip 加速   
国内源:
- pypi 清华大学源：https://pypi.tuna.tsinghua.edu.cn/simple
- pypi 豆瓣源 ：http://pypi.douban.com/simple/
- pypi 腾讯源：http://mirrors.cloud.tencent.com/pypi/simple
- pypi 阿里源：https://mirrors.aliyun.com/pypi

单行
#+begin_src bash
  pip install markdown -i https://pypi.tuna.tsinghua.edu.cn/simple
#+end_src

默认
#+begin_src bash
  # 清华源
  pip config set global.index-url https://pypi.tuna.tsinghua.edu.cn/simple
#+end_src
* bugs
** OSX 找不到 dylib
By default of CPython (and pyenv),
the python executable will be generated as static linked and libpython*.dylib will not be generated.

env PYTHON_CONFIGURE_OPTS="--enable-framework" pyenv install -v 3.8.0

https://github.com/pyenv/pyenv/issues/443#issuecomment-528277145
* production
initial
#+begin_src bash
  pip install -r requirements.txt
#+end_src
* requirement.txt
生成
#+begin_src bash
  pip freeze >requirements.txt
#+end_src
使用
#+begin_src bash
  pip install -r requirement.txt
#+end_src
* 依赖
~PYTHONPATH~ 来查询可调用依赖,  ~sys.path~ 可以获取

python 不允许相对路径检索, 更多的是 module 模式调度

bash 修改
#+begin_src bash
  export PYTHONPATH=$PYTHONPATH:/other/module
#+end_src

python 主动注入. 
#+begin_src python
  import sys
  import os

  SCRIPT_DIR = os.path.dirname(os.path.abspath(__file__))
  sys.path.append(os.path.dirname(SCRIPT_DIR))
#+end_src

根据外层执行路径转化为 module 执行
#+begin_src python
  import os.path
  import os

  def excute(path):
      [*path_arr, filename] = path.replace('.py', '').split('/')
      previous_path = [filename]
      while len(path_arr) > 0:
          current_path = "/".join(path_arr)
          if not os.path.isfile(current_path + '/__init__.py'):
              command = "cd {} && python -m {}".format(current_path, ".".join(previous_path))
              print(command)
              os.system(command)
              break
          previous_path.insert(0, path_arr.pop())

  if __name__ == "__main__":
      import sys
      print(sys.argv[-1])
      excute(sys.argv[-1])
#+end_src
* is, ==
is 比较的是内存地址是否相同, ==比较值是否相同, 并可以自定义

