#+STARTUP: all
#+SETUPFILE: ~/.emacs.d/org-styles/html/main.theme
#+TITLE: 浏览器渲染
#+DATE: [2021-07-04 13:56]
* Refers
   - https://www.cnblogs.com/yingsong/p/6170780.html
   - https://segmentfault.com/a/1190000013615988
   - https://github.com/vczh/GacUIBlog
* steps
   1. 下载解析 HTML 网页
   2. 解析, 发现 script
   3. 停止解析, 渲染线程交付给 js 引擎
   4. 下载资源, 或者直接执行
   5. 执行完成, 往下解析

** 阻塞效应
    当资源加载失败时候, 网页失去响应, 浏览器假死
    
** 顺序排布
    html 会等待所有 head 部分内容加载完成之后绘制, 不会等待 body 的执行, 按顺序可以避免阻塞.

    js 后置还有好处就是 DOM 生成了可以直接调度, 包括样式调整和选择. 
    
** 延迟 defer
    HTML 4. 01 支持 defer
    
    外链 css 和 js 并行下载, defer js 可以声明并行(允许顺序前置), 然后页面加载完成后执行

    非外链 script 不支持 defer

    默认加载按顺序执行, defer 不按顺序, 且不一定在 DOMContentLoaded 事件之前触发
    
** 异步 async
    js 声明 async 可以立即执行不按顺序(下载完成, 打断流程如 html 解析, 立即执行), 如 上报埋点. 

    声明后 js 不允许修改 dom 和样式, 不允许依赖 js 和 css. 

** 对比
    默认行为下, 立即加载 + 执行, 打断解析渲染.   
    Async, 异步加载不打断渲染, 加载完成后打断解析渲染立即执行.
    Defer, 异步加载, 等待所有文本解析渲染完成后解析.

    [[file:assets/284aec5bb7f16b3ef4e7482110c5ddbb_fix732.jpeg]]

** Priority hints
主要影响因素:
- 不同资源优先级不同
- 位置顺序
- preload 资源
- async,  defer script

可以在 devTools 中 network/priority 查看分配的不同资源的优先级. 

link, img, script, iframe 可以指定 importance 属性:
- high
- low
- auto

可以在 Chrome 的设置中打开 Experimental Web Platform Features 就可以试用这一特性
