#+STARTUP: content
* Link
** type
*** hard link

    硬链接，是指文件的另一个引用方式，指向真实数据存储地址。
    
    在 linux 系统中会对所有磁盘分区中的文件，不管什么类型，都会有一个编号，成为索引节点编号（Inode Index）。
    有了这个索引才能查到该文件的详细内容。
    因为允许同个文件对应多个编号，入口地址，这个索引就是硬链接。
    只有当所有硬链接丢失时，文件才会删除（回收站内的也算硬链接，未删除）。

    可以有效的防止误删，也可以为同一个文件绑定多份目录，比如说 lint，通用脚本，笔记同步等。

    因为是系统的多个索引编号，所以不能跨文件系统，不能对目录链接。
    
*** symbolic link

    符号链接，又称软链接，类似快捷方式，存放内容是指向内容路径的指针。

    可以用来快速定位到源文件实体，且节省空间。
    也可以对不存在的地址进行链接。

    软链接指向的是内容路径的指针，并非真实的内容，不能直接修改该文件。
    而且，如果指向一个硬链接，删除该硬链接后，原来的软链接并不会指到真实文件内容而是报错。

** Cli

   链接可以使用 ~ln~ 来创建。
   一般就是的使用方式 ~ln [-s] [target-path] [link-url]~ , ~-s~ 表示是否是软链接。
   其他更多用法可以查看 ~man ln~ 。

** NPM

   ~npm link~ 就是对应 ~npm~ 目录生成的软链接。

   和直接 ~npm install /path/to/link_module~ 的区别：
   1. ~install~ 会触发 ~pre/postinstall~ 钩子
   2. ~link~ 会使用当前 nodejs npm 的全局空间，指向全局的地址。
      在使用 ~nvm~ 的时候地址会不一样，但原地址依然存在切换还是可以使用
   3. ~install~ 会修改 ~package.json~

   一般操作是先到需要 ~link~ 的 ~module~ 路径执行 ~npm link~ 。
   这个时候会先执行 ~install~ ，会触发 ~hooks~ ，补齐依赖。
   最后会有一个 log。

   #+begin_src bash
     /Users/arius/.nvm/versions/node/v14.9.0/lib/node_modules/<module-name> -> /path/to/module
   #+end_src

   第一步的 ~link~ 默认会触发 ~install~, 但都是软链接，如果不想等的话可以手动 ~link~.

   #+begin_src shell
     pkg_name=$(cut -d "=" -f 2 <<< $(npm run env | grep "npm_package_name"))
     pkg_prefix=$(npm get prefix)
     if [[ $pkg_name == *"/"* ]]; then
	 folder=(${pkg_name//\// })
	 mkdir -p "$pkg_prefix/lib/node_modules/${folder[0]}"
     fi
     ln -s $(pwd) "$pkg_prefix/lib/node_modules/$pkg_name"
   #+end_src

   这个时候，全局目录会对应入口创建一个软链接，指向我们当前的项目。
   这也是为什么我们改动可以直接影响到使用 ~link~ 的项目。

   然后到对应项目中使用 ~npm link <linked-pkg-name>~ , 会有一个 log。

   #+begin_src bash
     /Users/arius/Code/current-package/node_modules/<module-name> -> /Users/arius/.nvm/versions/node/v14.9.0/lib/node_modules/<module-name> -> /path/to/real/module
   #+end_src

   这个时候创建对应 ~global node_modules~ 对应目录的软链接的。
   所以相关的所有 ~dependencies~ 都会走 ~link~ 的那个库的 ~node_modules~ 而非当前路径的。
   
   对于检索 ~peerdependencies~ 时，默认是会走到相对于 ~link-module~ 的 ~node_modules~ 。
   解决方案：
   1. ~node~ 执行使用的时候，可以带上 ~--preserve-symlinks~
   2. 对应这些依赖再创建一个 软链接，将这个依赖 ~link~ 到项目和库的 ~node_modules~ 里。

** pnpm
   速度对比：https://github.com/pnpm/benchmarks-of-javascript-package-managers

   除了继承了 yarn 缓存和 lock，还是用了硬链接的方式提高速度。
   减少掉复制依赖上花费一些时间, 同时这会导致所有项目的公共依赖使用的都是同一个文件。
   可以看到 cache 中的文件和项目中的文件是同一个文件。

   #+begin_src bash
     ❯ pwd
     /Users/arius/lib/pnpm-test/node_modules/.pnpm/react@17.0.1/node_modules/react
     ❯ find ~/.pnpm-store/v3 -samefile ./index.js
     /Users/arius/.pnpm-store/v3/files/25/412e88974b83582fa47ec907cb4d2a30b9027a192156099579a24425882be84b92548c07f87309be0d09f0f5c3f184d856dc323af6f7f236a3c3f3dbbe1cf4
   #+end_src

   也正是因为所有的依赖都是通过 link 管理, 所以 pnpm 可以自定义依赖的来源:
   - workspace: 局部 ~npm link~, 类似 ~lerna~ 的功能
   - aliases: 原生实现别名 

** Refers
   - https://blog.csdn.net/LEON1741/article/details/100136449
   - https://juejin.cn/post/6844904164468768776
   - https://www.chevtek.io/you-can-finally-npm-link-packages-that-contain-peer-dependencies/
   - https://pnpm.io/workspaces
