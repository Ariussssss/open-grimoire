#+STARTUP: all
* llvm-clang
** Refers
- https://zhuanlan.zhihu.com/p/140462815
- https://zhuanlan.zhihu.com/p/66793637

** Background
Apple 公司一直用 GCC 作为编译器, GCC 对 OBjective-C 语言特性支持不够.  
自己开发的模块得不到 GCC 委员会的合并, 老乔不开心, 在 [[http://www.nondot.org/sabre/][Chris Lattner]] 毕业后, 招入麾下, 开发自己的编辑器.  
LLVM 最初收到 Apple 的大力支持.  

LLVM 设计之初, 只想着做优化部分研究, 搞虚拟机, 全程 ~Low Level Virtual Machine~ .  

因为 LLVM 只是一个编译器框架, 所以还需要一个前端来支撑整个系统.  
所以 Apple 又拨款拨人一起研发了 Clang , 作为整个编译器的前端, Clang 用来编译 C、C++和 Objective-C.  

** 优点
- 不同前后端使用同一个 LLVM IR
- 新支持语言只需要实现新前端
- 新支持硬件只需要实现新后端
- 优化流程主要针对 IR, 前后端不需要修改和兼容
- 成为实现各种静态和运行时编译语言的通用基础架构

** 概念
一词多义
   
*** LLVM
- LLVM 项目和基础结构: 包括前端, 优化器, 后段, 汇编器, 连接器等
- 基于 LLVM 开发编译器: 基于 LLVM 前端或者后端部分开发
- LLVM 库: LLVM 代码库和工具
- LLVM 核心, IR 和后端算法内容
- LLVM IR: 中间层表示

*** Clang
通常指 Clang 的命令行驱动程序, 黑盒直接可用.  
监管管理整个编译器流程, 调用 Clang(前端为主) 和 LLVM 框架实现编译.  
类似 GCC 驱动 cc, as, ld 等程序.   

前端流程, 可分布执行:
- Preprocess 预处理
  替换宏和头文件导入等
- Lexical Analysis 词法分析  
  不检验语义, 文本转换成 Token
- Semantic Analysis 语法分析  
  Parser 和 Sema 两个模块配合完成, 验证语法正确性, 组合 AST
- Static Analysis 静态分析  
  分析出非与发行错误
- 中间代码生成  
  结束前端部分生成 LLVM IR 作为输入桥接后端

** LLVM

LLVM 是一个编译器框架.

传统编译器分为前端, 优化和后端:
  - Frontend 前端: 词法分析、语法分析、语义分析、生成中间代码
  - Optimizer 优化器: 中间代码优化
  - Backend 后端: 生成机器码

    [[file:images/20210615-133743_screenshot.png]]


  LLVM 作为编译器框架, 是需要各种功能模块支撑起来的, 你可以将 clang 和 lld 都看做是 LLVM 的组成部分.  
  框架的意思是, 可以基于 LLVM 提供的功能开发自己的模块, 并集成在 LLVM 系统上, 增加它的功能, 
  或者就单纯自己开发软件工具, 而利用 LLVM 来支撑底层实现.  
  LLVM 由一些库和工具组成, 正因为它的这种设计思想, 使它可以很容易和 IDE 集成.  

  [[./llvm-clang.image/v2-e93d22914f2939017db6c6ff463cc2d8_b.jpg]]

  这个图是 Clang/LLVM 的简单架构.  
  最初时, LLVM 的前端是 GCC, 后来 Apple 还是立志自己开发了一套 Clang 出来把 GCC 取代了.  
  我们也可以开发自己的前端, 和 LLVM 后端配合起来, 实现我们自定义的编程语言的编译器.  

  能注意到中间有个 LLVM IR linker, 这个是 IR 的链接器, 而不是 GCC 中的那个链接器.  
  为了实现链接时优化, LLVM 在前端（Clang）生成单个代码单元的 IR 后, 将整个工程的 IR 都链接起来, 同时做链接时优化.  
  LLVM backend 就是 LLVM 真正的后端, 也被称为 LLVM 核心, 包括编译、汇编、链接这一套, 最后生成汇编文件或者目标码.  

  LLVM IR 是 LLVM 的中间表示, LLVM Intermediate Representation, 它是一种 low-level languange, 是一个像 RISC 的指令集.  

  [[./llvm-clang.image/v2-1aa226866e89f7b1befeb7d18cfca52b_b.jpg]]

  IR 有三种表示.  
  第一种是可读的 IR, 类似于汇编代码, 但其实它介于高等语言和汇编之间, 这种表示就是给人看的, 磁盘文件后缀为.ll.  
  第二种是不可读的二进制 IR, 被称作位码（bitcode）, 磁盘文件后缀为.bc.  
  第三种表示是一种内存格式, 只保存在内存中, 所以谈不上文件格式和文件后缀.  

  这种格式是 LLVM 之所以编译快的一个原因.  
  它不像 GCC, 每个阶段结束会生成一些中间过程文件, 它编译的中间数据都是这第三种表示的 IR.  
  三种格式是完全等价的, 我们可以在 Clang/LLVM 工具的参数中指定生成这些文件（默认不生成, 对于非编译器开发人员来说, 也没必要生成）, 
  可以通过 llvm-as 和 llvm-dis 来在前两种文件之间做转换.  

** Try
clang 是 mac 自带的, 
   
#+begin_src c
  // factorial.c
  int factorial(int val, int total) {
    if(val==1) return total;
    return factorial(val-1, val * total);
  }
#+end_src

#+begin_src bash
  $ clang -S -emit-llvm factorial.c # factorial.ll 可读
  $ clang -c -emit-llvm factorial.c # factorial.bc
#+end_src
