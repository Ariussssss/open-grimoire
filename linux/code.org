#+STARTUP: all
#+SETUPFILE: ~/.emacs.d/org-styles/html/main.theme
#+TITLE: code
#+DATE: [2021-11-17 20:12]
* Refers
- https://www.cnblogs.com/zhangziqiu/archive/2011/03/30/computercode.html
- https://evanw.github.io/float-toy/
* 基础
1 字节 byte = 8 位 bit 比特

原码, 反码, 补码的产生过程就是为了解决计算机做减法和引入符号位的问题
* 机器语言 原生码 machine language Native Code
机器数都是带符号的, 最高位存放符号, 
* 原码 true form
二进制数.

分成有符号和无符号.

简单直接.
不能直接参与运算, 需要使用补码. 
如: 1 + (-1) = 0, 00000001+10000001=10000010 = -2. 是错误的
* 反码 1's complement
是一种计算机中机器码的表示.

正数的反码等于原码.
负数的反码通过保留符号位, 将原码的数值位取反所得.

0 的表示有两种方法.

反码表示在计算机中往往作为数码变换的中间环节. 
* 补码 2's complement

正数和 0 的补码就是该数字本身.
负数的补码则是将其对应正数按位取反再加 1.

优点是可以用到加减算法处理中, 运算:
#+begin_src bash
      0011 (3)
    + 1111 (-1)
  --------------
     10010 (2)
#+end_src
忽略超出的第五个比特(判断是否溢出 overflow)

有两个数字的补码等于本身: 一个是 0 码, 另一个为该比特内可表示有符号位区分的二进制形式的最大负数 (即 1000...)
* float
单精度 32 Bit, 1 Bit 符号 8 Bit 指数 23 Bit 小数, 即 7 位小数

双精度 64 Bit, 1 Bit 符号 11 Bit 指数 52 Bit 小数, 即 16 位小数
* unicode
- https://www.compart.com/en/unicode/U+2027
- ~c-s-u~, 2027 enter
  

