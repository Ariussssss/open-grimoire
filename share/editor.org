#+STARTUP: content
* editor
* 前言
  之前和同事们讨论到编辑器与效率，想总结一下我日常用的一些功能。分享给大家。

  我用的是 Emacs ，是 1975 诞生的远古玩具。
  并不是想推荐给大家，只是它能做到大部分功能，相信 vscode 等新星肯定也可以做到大部分。

  也主要是想大家沟通讨论一下，大家使用上的一些想法和建议，相互学习。

* 场景演示

** 日常开发
   1. 日常开发项目
   2. 查询项目 theme
   3. 打断 note, 记录问题
   4. 切回项目，启动终端和文件夹
   5. 打断提问，查询源码
   6. 调整设置
   7. 还原 workspace

* 常用操作记录
** 基础操作
*** 搜索
    搜索是提高效率的很重要的一个核心要素。

     - 单文件搜索
     - 项目内全局搜索
     - 正则搜索
     - 匹配 gitignore 搜索
     - 自定义 ignore 搜索

*** 跳转
    跳转是个人觉得很重要的一个功能，其中的功能也可以用其他个人喜好的方式代替。

    - 项目内文件前缀跳转
    - 项目文件名正则检索
    - 查看编辑文件历史记录
    - 打开当前 folder
    - 打开当前地址终端
    - 文件正则名检索项目
    - 文件名下载 github 和 codebase 的项目

*** 编辑
    这个我觉得很重要，但不否认部分选手用鼠标效率也很强。。。

    - 上下左右，跳词，跳括号
    - 格式化
    - 跳行数，跳文首文中文尾
    - 当前行居中，局上局下
    - 折叠打开代码块，全文按级别折叠
    - 多选，多行编辑复制
    - 粘贴板历史
    - undo, redo, undo-tree
    - 草稿纸

** 自定义
   提高编程的兴趣和乐趣的方式，不仅提高效率，更是一种生活方式。

*** 基础
    - 外观主题可配置
    - 插件下载，管理及备份
    - 快捷键，方法查询及自定义
    - 社区文化及讨论
 
*** 进阶
    - 备忘录，闪念，笔记
    - 翻译，记单词
    - 外观自定义及修改
    - 插件自定义，维护，共建
    - 熟悉编辑器开发语言，插件开发
    - 与 shell，AppleScript，终端等控制系统，多种可能协同
    - 与业务关联，通过 sso，access_token 对基于网络对业务场景开发进行提速
    - 无限的可能，甚至像个操作系统，如：eaf

* More than editor

** Why Emacs

   VS Code 战胜了 Atom，靠的就是极高的速度和性能。
   为了保证这一点，VSCode 采用了相对封闭的方案，将大量接口收敛，留给插件的定制性很有限。
   这样良莠不齐的插件市场没办法很大程度的影响到 VS Code  高性能。
   也导致很多更强的定制性功能无法满足，内置的 Electron 也为了性能定制去除一些不必要的东西，如 背景，FFmpeg 音视频等。

   Emacs 相比于 Vim 和 VSCode 在这点相对开发，拥有极其强大的定制型。
   通过其他语言和终端的调度, 甚至诞生了 [[https://github.com/manateelazycat/emacs-application-framework][EAF (emacs-application-framework)]] 这种庞然巨物，
   可惜这个只能在 Lunix 上玩。
   个人偏好使用一款编辑器而不是 IDE，
   熟悉大部分模块，想做到只下载和开放需要的模块和模式，
   通过切换模式关闭相对不需要的模块，
   也相对不那么黑盒，同时保持高速。

** ROI

   #+begin_quote
   不代表其他编辑器需要或者做到，更多的是思考和习惯方式。
   #+end_quote

   经常有人问我投入这么多时间是否值得。

   一开始是因为多系统和备份的关系，从 sublime text3 中逃出。
   在 Emacs 和 Vim 中做选择，选了这个。
   (也没有完全不用 Vim，只是主力是 Emacs)

   对于 Emacs 对于我来说不只是编辑器，期望是更多的。
   可以理解成一个开放性的接口，将我和系统连接起来。
   因为十分熟悉，甚至可以说是我创造了它（每个人拥有每个人自己的 Emacs，同时也基本用不了别人的）

   为了和系统通讯，可以拼接组成 shell 语句。
   为了和开发接口的 App 通讯，可以调用 AppleScript。
   为了获取 git 资源可以通过 access_token 配合 shell。
   为了链接 rds，可以通过 session 去获取去请求。
   如果是 Linux 平台，功能将被更大程度地放大，可惜我折腾的电脑都不太稳定还是选择 Mac 作为主力。。

   感觉更像是长期的投入，只要我还在编程，就不会亏。
   同时，调戏编辑器也可以让长时间的编码没那么烦闷🙈。

** 反思
   
   学习了 Emacs 一共有一年多了，从 0 到实际作为主力日常使用大概花了半年。
   依靠 git 控制才保证每次开的都是不会是上次调试搞崩的版本。。
   偶尔需要依靠副编辑器来 debug 和重构代码。
   必要时候可以还原到上一次稳定的版本，保证不被影响到工作效率。
   这个思维让基本通过 git 来维护大部分东西，包括笔记 todo 等。

   还有个习惯就是习惯看源码（也可能是英文不够好，看文档效率不行。。）。
   因为每次编辑器哪里用的不顺利或者哪里用的好使都是直接到源码里面 debug，或者就是我写的东西有问题。
   也得益于 lisp 的便捷性以及变量的不安全（缺陷，但降低了 debug 和学习的成本）

* Referrs
  - https://www.zhihu.com/question/67843842/answer/257186715
    一些链接集合
  - https://manateelazycat.github.io/emacs/2016/03/06/what-is-emacs.html
    人生导师的哲学
  - https://everet.org/thinking-of-emacs.html
    前东家认识的，入坑引路人
  - https://www.zhihu.com/column/c_1116711987706478592
    对于提高效率的思考
